#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


readonly script_mission='Client for ASICs: Hive Start'
readonly script_version='0.0.1'
readonly script_basename="$( basename "$0" )"


# !!! bash strict mode, no unbound variables
#set -o nounset # commented out for production bc still not tested thoroughly


# functions

function echo_ok		{ echo -e "${GRAY-}${script_basename}: ${BGREEN-}${*}${NOCOLOR-}"; }
function echo_action	{ echo -e "${GRAY-}${script_basename}> ${WHITE-}${*}...${NOCOLOR-}"; }
function echo_info		{ echo -e "${GRAY-}${script_basename}: ${NOCOLOR-}${*}${NOCOLOR-}"; }
function echo_warning	{ echo -e "${GRAY-}${script_basename}: ${BYELLOW-}${*}${NOCOLOR-}"; }
function echo_error		{ echo -e "${GRAY-}${script_basename}: ${BRED-}${*}${NOCOLOR-}"; } 1>&2

function kill_all {
	# args
	local -r process_name_to_kill="$1"

	# vars
	local -i this_process
	local process_name_to_kill_sanitized

	# code
	if which killall > /dev/null; then
		killall "$process_name_to_kill" > /dev/null 2>&1
	else
		# not all systems have killall
		process_name_to_kill_sanitized="[${process_name_to_kill::1}]${process_name_to_kill:1}" # enclose the first char in square [b]rackets
		for this_process in $( ps | awk "/$process_name_to_kill_sanitized/{print \$1}" ); do
			kill -9 "$this_process" > /dev/null 2>&1
		done
	fi
}

function get_datetime_from_server {
	# consts
	local -r -i max_attempts=10

	# vars
	local server_answer
	local -i date_from_server_in_seconds curl_exitcode attempts_counter

	# code
	[[ -s "$RIG_CONF" ]] && source "$RIG_CONF" # !!! will be needed to start WD later
	[[ -z "${HIVE_HOST_URL-}" ]] && HIVE_HOST_URL='http://api.hiveos.farm'

	# trying to get a datetime (every next pause will be longer and longer)
	for (( attempts_counter = 1; attempts_counter <= max_attempts; attempts_counter++ )); do
		server_answer="$( curl --silent --head "${HIVE_HOST_URL/https/http}" 2>&1 )" # http only
		curl_exitcode=$?
		if (( curl_exitcode )); then
			echo_error "$( human-curl-error "$curl_exitcode" )"
			[[ -n "$server_answer" ]] && echo_error "$server_answer"
			echo_error "Network is lost, cannot get datetime from $HIVE_HOST_URL (attempt #$attempts_counter)"
			sleep $(( attempts_counter ))
		else
			date_from_server_in_seconds="$( grep -Fm1 'Date:' <<< "$server_answer" | cut -d' ' -f3-6 | timetran )"
			echo_info "Current system date is $( date )"
			echo_ok "System date set to $( date -s "@$date_from_server_in_seconds" )"
			break
		fi
	done

	(( curl_exitcode )) && echo_error "Unable to connect to $HIVE_HOST_URL. No attempts left."
}


# __    __         __                  _                                            _                      _
#/ / /\ \ \___    /__\ ___  __ _ _   _(_)_ __ ___     /\/\   ___  _ __ ___    /\/\ (_)_ __   ___ _ __ __ _| |___
#\ \/  \/ / _ \  / \/// _ \/ _\`| | | | | '__/ _ \   /    \ / _ \| '__/ _ \  /    \| | '_ \ / _ \ '__/ _\`| / __|
# \  /\  /  __/ / _  \  __/ (_| | |_| | | | |  __/  / /\/\ \ (_) | | |  __/ / /\/\ \ | | | |  __/ | | (_| | \__ \
#  \/  \/ \___| \/ \_/\___|\__, |\__,_|_|_|  \___|  \/    \/\___/|_|  \___| \/    \/_|_| |_|\___|_|  \__,_|_|___/
#                             |_|
[[ ! "$PATH" =~ (^|:)/hive/bin:/hive/sbin(:|$) ]] && export PATH="$PATH:/hive/bin:/hive/sbin" # add only if not exist
[[ ! "$LD_LIBRARY_PATH" =~ (^|:)/hive/lib(:|$) ]] && export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/hive/lib" # save $LD_LIBRARY_PATH:/hive/share/S9/lib for hiveon

source asic-model
source colors

[[ "$ASIC_MODEL" == 'Toddminer C1'* && ! "$PATH" =~ (^|:)/sbin ]] && export PATH="$PATH:/sbin:/usr/sbin" # add only if not exist
[[ $ASIC_MODEL =~ "Antminer D3 Blissz" ]] && ln -s /usr/lib/libcurl-gnutls.so.4 /usr/lib/libcurl.so.5


# make directory in RAM
mkdir -p /run/hive


# wipe screens. for some reason there can be dead sockets after restart on tmpfs (!!!)
screen -wipe > /dev/null


RIG_CONF='/hive-config/rig.conf'


# logo
uname -a
echo -e "${BYELLOW-}
 _______ _______ ___ ___ _______
|   |   |_     _|   |   |    ___|
|       |_|   |_|   |   |    ___|
|___|___|_______|\_____/|_______|
${NOCOLOR-}
"


if [[ $ASIC_MODEL =~ "Antminer S15" || $ASIC_MODEL =~ "Antminer T15" || $ASIC_MODEL =~ "Antminer S9 SE" || $ASIC_MODEL =~ "Antminer S9k" ]]; then
	: nothing
	#echo_action 'Applying crontab'
	#nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	#nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &
elif [[ $ASIC_MODEL == "Antminer S9" || $ASIC_MODEL =~ "Antminer T9+" || $ASIC_MODEL =~ "Antminer S10" || $ASIC_MODEL =~ "Antminer T9" || $ASIC_MODEL == "Antminer S9i" || $ASIC_MODEL == "Antminer S9j" || $ASIC_MODEL == "Minecenter S9" || $ASIC_MODEL == "Antminer S9 Hydro" || $ASIC_MODEL == "Antminer E3" || $ASIC_MODEL == "Antminer " || $ASIC_MODEL =~ "Antminer S9 (vnish" || $ASIC_MODEL =~ "Antminer S9" || $ASIC_MODEL =~ "Antminer S11" ]]; then
	echo_action 'Applying crontab'
	[[ ! -d /var/spool/cron/crontabs ]] && ln -s /tmp  /var/spool/cron/crontabs
	crontab /hive/etc/crontab.root
	[[ $( ps aux | grep -c '[c]rond' ) -eq 0 ]] && /usr/sbin/crond

	#hosts patch
	touch /tmp/hosts
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/hive/share/S9/lib
	cp /lib/libnss_files.so.2 /hive/share/S9/lib/libnss_files.so.2
	sed -i "s/\/etc\/hosts/\/tmp\/hosts/" /hive/share/S9/lib/libnss_files.so.2

	if [[ -z "$HIVEON_VERSION" ]]; then
		echo_action 'Patching upgrade'
		cd /www/pages/cgi-bin/
		patch -p10 /www/pages/cgi-bin/upgrade.cgi < /hive/share/S9/upgrade.cgi.patch
	fi
	sed -i '/\#\#\# HIVE HECK \#\#\#/,$d' /config/network.conf
	if [[ -d /hive-config && ! -L /hive-config ]]; then
		mkdir -p /config/hive/hive-config
		mv -f /hive-config /config/hive/
		ln -s /config/hive/hive-config/ /hive-config
	fi
	#ramdisk
	if ! mount | grep ramdisk > /dev/null; then
		mkdir -p /mnt/ramdisk
		mount -t tmpfs -o size=100m tmpfs /mnt/ramdisk
	fi
elif [[ $ASIC_MODEL =~ "Antminer T17" || $ASIC_MODEL =~ "Antminer S17" || $ASIC_MODEL =~ "Antminer X17" ]]; then
	#echo_action 'Applying crontab'
	#nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	#nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	#hosts patch
	touch /tmp/hosts
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/hive/share/S9/lib
	cp /lib/libnss_files.so.2 /hive/share/S9/lib/libnss_files.so.2
	sed -i "s/\/etc\/hosts/\/tmp\/hosts/" /hive/share/S9/lib/libnss_files.so.2

	# enable dmesg timestaps
	echo_action 'Enabling kernel log timestamps'
	echo 'Y' > /sys/module/printk/parameters/time
fi


# test enable MTU autodetect
echo_action 'Enabling Path MTU Discovery'
echo '1' > /proc/sys/net/ipv4/tcp_mtu_probing


# (test) disable avahi-daemon
if [[ "$ASIC_MODEL" == 'Antminer'* ]]; then
	echo_action 'Stopping Avahi daemon'
	[[ -f /etc/init.d/avahi ]] && /etc/init.d/avahi stop
	[[ -f /usr/sbin/avahi-daemon ]] && mv /usr/sbin/avahi-daemon /usr/sbin/avahi-daemon-disabled
	# /etc/init.d/avahi stop -- does not work on some models
	kill_all avahi
fi


echo_action 'Caching a host resolve'
cache-hive-ip


echo_action 'Fetching an actual time from the server'
get_datetime_from_server


echo_action 'Saying hello to the server'
hello boot
hello_exitcode=$?
if (( hello_exitcode )); then
	echo_error "hello failed with exitcode $hello_exitcode"
	if (( hello_exitcode > 1 )); then
		# '> 1' do mean numerous curl errors
		echo_action 'Detaching hello to a background screen session (until the successful connect)'
		screen -dmS 'trying_to_say_hello' /hive/sbin/bash -c \
			'c=0; until hello boot; do printf "\n> hello failed with exitcode %u (attempt #%u), waiting 10s...\n" $? $(( ++c )); sleep 10; done |& tee /tmp/hello-boot.log'
	fi
fi


[[ -s $RIG_CONF ]] &&
	source "$RIG_CONF" #will be needed to start WD later

echo_action 'Starting agent screen session'
agent-screen dontattach


echo_action 'Starting controller'
kill_all controller
nohup /hive/sbin/bash -c '/hive/bin/controller >> /config/hive-controller.log 2>&1' > /dev/null 2>&1 & disown # disown is esp. for Innosilicon smart-ass


#bmminer is autostarted after in /etc/rcS.d
#echo_action 'Starting miner'
#miner start


echo_action 'Generating miner config'
/hive/bin/miner config-gen


# motd
echo
bash /hive/etc/motd


# mission complete
echo_ok 'Hive start finished'


exit 0
