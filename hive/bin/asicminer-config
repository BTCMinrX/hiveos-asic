#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.3.7
#


# !!! bash strict mode, no unbound variables
#set -o nounset # commented out for production bc still not tested thoroughly


readonly script_mission='Client for ASICs: Miner config generator'
readonly script_version='0.3.2'
readonly script_basename="$( basename "$0" )"


# functions

function echo_ok		{ echo -e "${LGRAY-}${script_basename}: ${BGREEN-}${*}${NOCOLOR-}"; }
function echo_action	{ echo -e "${LGRAY-}${script_basename}> ${WHITE-}${*}...${NOCOLOR-}"; }
function echo_info		{ echo -e "${LGRAY-}${script_basename}: ${NOCOLOR-}${*}${NOCOLOR-}"; }
function echo_warning	{ echo -e "${LGRAY-}${script_basename}: ${BYELLOW-}${*}${NOCOLOR-}"; }
function echo_error		{ echo -e "${LGRAY-}${script_basename}: ${BRED-}${*}${NOCOLOR-}"; } 1>&2

function die {
	# !!! must be the first line in this function to catch the incoming error code -- do not move
	local -r incoming_exitcode=$?

	# args
	local -r message="$1"
	local -r exitcode="${2:-$incoming_exitcode}"

	# code
	[[ -n "$message" ]] && echo_error "$message"
	exit $(( exitcode ))
}

function print_script_version {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function print_script_usage {
	echo -e "Usage: ${CYAN-}${script_basename} [OPTIONS]${NOCOLOR-}"
	echo
	echo -e "   ${WHITE-}-d, --dry-run${GRAY-}                 generate config but do not save${NOCOLOR-}"
	echo -e "   ${WHITE-}-f, --full-compare${GRAY-}            compare Flight Sheet vs actual miner config${NOCOLOR-}"
	echo -e "   ${WHITE-}-p, --pools-only-compare${GRAY-}      compare Flight Sheet vs actual miner config, pools section only${NOCOLOR-}"
	echo -e "   ${WHITE-}-q, --quiet${GRAY-}                   quiet mode, only errors displayed${NOCOLOR-}"
	echo -e "   ${WHITE-}-v, --verbose${GRAY-}                 verbose mode, show full config after generation${NOCOLOR-}"
	echo
}

function parse_arguments {
	# default flow
	((
		save_config_FLAG = 1,
		is_verbose_FLAG = 0,
		compare_configs_ENUM = compare_NONE
	))

	# code
	for this_argument in "$@"; do
		case "$this_argument" in
			'-d' | '--dry-run' )
				save_config_FLAG=0
			;;

			'-f' | '--full-compare' )
				((
					save_config_FLAG = 0,
					compare_configs_ENUM = compare_FULL
				))
			;;

			'-p' | '--pools-only-compare' )
				((
					save_config_FLAG = 0,
					compare_configs_ENUM = compare_POOLS
				))
			;;

			'-q' | '--quiet' )
				exec &> /dev/null
			;;

			'-v' | '--verbose' )
				is_verbose_FLAG=1
			;;

			'')
				: ok good to go
			;;

			'-h'|'--help')
				print_script_version
				print_script_usage
				exit 0
			;;

			*)
				print_script_version
				print_script_usage
				die "Unknown argument: $this_argument" 1
			;;
		esac
	done
}

function sanitize_worker_name {
	#
	# Usage: sanitize_worker_name 'worker_name'
	#
	# exit code: worker_name_validity_ENUM
	#	{
	#		worker_name_VALID=0
	#		worker_name_ALMOST_VALID=1
	#		worker_name_NOT_VALID=2
	#		worker_name_EMPTY=3
	#	}
	#

	# args
	local -r worker_name_original="${1-}"

	# consts
	local -r max_safe_length=8
	local -r safe_char='x'
	local -r worker_name_valid_RE='^[[:alnum:]]{1,'$max_safe_length'}$'
	local -r worker_name_almost_valid_RE='^[[:alnum:]_-]+$'
	local -r blacklisted_chars_RE='[^[:alnum:]_-]'

	# vars
	local worker_name_corrected
	local -i worker_name_validity_ENUM

	# code
	worker_name_corrected="$worker_name_original" # save for comparing later

	if [[ "$worker_name_original" =~ $worker_name_valid_RE ]]; then
		worker_name_validity_ENUM=worker_name_VALID
	elif [[ "$worker_name_original" =~ $worker_name_almost_valid_RE ]]; then
		worker_name_validity_ENUM=worker_name_ALMOST_VALID
	elif [[ -z "$worker_name_original" ]]; then
		worker_name_corrected='unnamed'
		worker_name_validity_ENUM=worker_name_EMPTY
	else
		worker_name_corrected="${worker_name_original//$blacklisted_chars_RE/$safe_char}" # replace blacklisted chars
		#worker_name_corrected="${worker_name_corrected::$max_safe_length}" # trim the length # !!! disabled temporarily
		worker_name_validity_ENUM=worker_name_NOT_VALID
	fi

	echo "$worker_name_corrected"

	return $(( worker_name_validity_ENUM ))
}

function sanitize_ASICMINER_TEMPLATE {
	#
	# Usage: sanitize_ASICMINER_TEMPLATE 'ASICMINER_TEMPLATE_to_sanitize'
	#
	# exit code: worker_name_validity_ENUM
	#	{
	#		worker_name_VALID=0
	#		worker_name_ALMOST_VALID=1
	#		worker_name_NOT_VALID=2
	#		worker_name_EMPTY=3
	#	}
	#

	# args
	local -r template_original="${1-}"

	# consts
	local -r valid_template_RE='%[[:alpha:]][[:alnum:]_]+[[:alpha:]]%'

	# vars
	local -a template_as_array
	local IFS
	local WORKER_NAME_field_original WORKER_NAME_field_corrected template_corrected
	local -i worker_name_validity_ENUM

	# code
	template_corrected="$template_original" # save for comparing later

	if [[ -n "$template_original" ]]; then
		# decompose by '.' delimiter
		IFS='.' template_as_array=( $template_original )
		# only if the content does look conventional as in "wallet.worker_name"...
		if (( ${#template_as_array[@]} == 2 )); then
			WORKER_NAME_field_original="${template_as_array[1]}"
			# ...and doesn't contain templates like %WORKER_NAME%
			if [[ ! "$WORKER_NAME_field_original" =~ $valid_template_RE ]]; then
				WORKER_NAME_field_corrected="$( sanitize_worker_name "$WORKER_NAME_field_original" )"
				worker_name_validity_ENUM=$?
				case $(( worker_name_validity_ENUM )) in

					"$worker_name_VALID")
						: skip
					;;

					"$worker_name_ALMOST_VALID")
						echo_warning "A doubtful worker name '$WORKER_NAME_field_original' detected (but hasn't corrected)" 1>&2
						echo_warning "Tip: remove '_' and/or '-' characters in case you cannot connect to the pool" 1>&2
					;;

					*)
						# compose the worker name back
						template_as_array[1]="$WORKER_NAME_field_corrected"
						IFS='.' template_corrected="${template_as_array[*]}"
						echo_warning "Invalid worker name detected and corrected: $WORKER_NAME_field_original -> $WORKER_NAME_field_corrected" 1>&2
					;;

				esac
			fi
		fi
	fi

	echo "$template_corrected"

	return $(( worker_name_validity_ENUM ))
}

function sanitize_ASICMINER_TEMPLATEs_by_ref {
	#
	# Usage: sanitize_ASICMINER_TEMPLATEs_by_ref 'variable_name'...
	#

	# args
	# no definition, used later as "$@"

	# vars
	local this_variable_name this_variable_original_value this_variable_new_value
	local transformation_container
	local message_header message_body
	local -a invalids_pre_array=() invalids_post_array=() almost_valids_pre_array=() almost_valids_post_array=()
	local -i worker_name_validity_ENUM

	# code
	for this_variable_name in "$@"; do
		local -n this_variable_by_ref="$this_variable_name"
		this_variable_original_value="$this_variable_by_ref"

		if [[ -n "$this_variable_original_value" ]]; then
			this_variable_new_value="$( sanitize_ASICMINER_TEMPLATE "$this_variable_original_value" )"
			worker_name_validity_ENUM=$?
			case "$worker_name_validity_ENUM" in

				"$worker_name_ALMOST_VALID" )
					transformation_container="${this_variable_original_value#*.}"
					almost_valids_pre_array+=( "$transformation_container" )
					transformation_container="${transformation_container//[^_-]/ }"
					transformation_container="${transformation_container//[^[:space:]]/^}"
					almost_valids_post_array+=( "$transformation_container" )
				;;

				"$worker_name_EMPTY" | "$worker_name_NOT_VALID" )
					# assign a new value
					this_variable_by_ref="$this_variable_new_value"
					# accumulate a changes log to display later
					invalids_pre_array+=( "${this_variable_original_value#*.}" )
					invalids_post_array+=( "${this_variable_new_value#*.}" )
				;;

			esac
		fi
	done

	if (( ( ${#almost_valids_pre_array[@]} || ${#invalids_pre_array[@]} ) && save_config_FLAG )); then
		if (( ${#almost_valids_pre_array[@]} )); then
			message_header="Doubtful worker name detected"
			message_body+="Please check your Flight Sheet. We have detected doubtful characters* in the worker name:"$'\n'$'\n'
			message_body+="  <strong>${almost_valids_pre_array[*]}</strong>"$'\n'
			message_body+="  ${almost_valids_post_array[*]}"$'\n'
			(( ${#invalids_pre_array[@]} )) && message_body+=$'\n' # add a newline between
		fi
		if (( ${#invalids_pre_array[@]} )); then
			message_header="Invalid worker name detected and corrected"
			message_body+="Please fix your Flight Sheet. We have detected AND corrected invalid characters* in the worker name."$'\n'$'\n'
			message_body+="  Before correction: <strong>${invalids_pre_array[*]}</strong>"$'\n'
			message_body+="   After correction: <strong>${invalids_post_array[*]}</strong>"$'\n'$'\n'
		fi

		message_body+='<hr>'
		message_body+='* The vast majority of pools DO NOT accept a worker name which contains anything beyond letters and numbers. No under_scores and hy-phens allowed. Also, the worker name should be no more than 8 characters long.'$'\n'$'\n'
		message_body+='** If you do not want to see these warnings, please update your Flight Sheet to use a template <strong>%WORKER_NAME_RAW%</strong> instead of <strong>%WORKER_NAME%</strong>'

		message warning "$message_header" --payload --silent <<< "$message_body"
	fi
}

function sanitize_ASICMINER_URL {
	#
	# Usage: sanitize_ASICMINER_URL 'ASICMINER_URL_to_sanitize'
	#
	# exit codes:
	#
	# 0: sanitized ok, was incorrect
	# 1: not sanitized (left intact), was correct
	#

	# args
	local -r url_original="${1-}"

	# consts
	local -r url_content_wrong='stratum+tcp://stratum+tcp://'
	local -r url_content_good='stratum+tcp://'

	# vars
	local url_corrected

	# code
	url_corrected="$url_original" # save for comparing later

	if [[ -n "$url_original" && "$url_original" == *"$url_content_wrong"* ]]; then
		url_corrected="${url_original//$url_content_wrong/$url_content_good}"
		echo_warning "Invalid pool URL detected & corrected: removed an extra 'stratum+tcp://'" 1>&2
	fi

	echo "$url_corrected"
	[[ "$url_corrected" != "$url_original" ]] # generate a relevant exit code
}

function sanitize_ASICMINER_URLs_by_ref {
	#
	# Usage: sanitize_ASICMINER_URLs_by_ref 'variable_name'...
	#

	# args
	# no definition, used later as "$@"

	# vars
	local this_variable_name this_variable_original_value this_variable_new_value
	local -a old_values_array new_values_array
	local -i is_something_changed_FLAG=0

	# code
	for this_variable_name in "$@"; do
		local -n this_variable_by_ref="$this_variable_name"
		this_variable_original_value="$this_variable_by_ref"

		if [[ -n "$this_variable_original_value" ]] && this_variable_new_value="$( sanitize_ASICMINER_URL "$this_variable_original_value" )"; then
			this_variable_by_ref="$this_variable_new_value"
			# accumulate the changes to display later
			old_values_array+=( "$this_variable_original_value" )
			new_values_array+=( "$this_variable_new_value" )
			is_something_changed_FLAG=1
		fi
	done

	if (( is_something_changed_FLAG && save_config_FLAG )); then
		message warning "Invalid pool URL detected & corrected" --payload --silent <<-EOM
			<h3>Please fix your Flight Sheet</h3>We have detected an invalid pool URL and then corrected it. What exactly was changed:

			Before: ${old_values_array[@]}
			 After: ${new_values_array[@]}
		EOM
	fi
}

function generate_miner_configuration_to {
	#
	# Usage: generate_miner_configuration_to 'variable_name'
	#

	# args
	local -r -n function_result_by_ref="$1"

	# vars
	local -i pools_count pool_index first_url_count
	local pool pools config_global
	local line varkey varval
	local this_template_label this_template_placeholder
	local final_configuration
	local WORKER_NAME_RAW

	# code
	sanitize_ASICMINER_TEMPLATEs_by_ref 'ASICMINER_TEMPLATE' 'ASICMINER_TEMPLATE2' 'ASICMINER_TEMPLATE3'
	sanitize_ASICMINER_URLs_by_ref 'ASICMINER_URL' 'ASICMINER_URL2' 'ASICMINER_URL3'

	pools_count=1
	[[ -n "${ASICMINER_TEMPLATE2-}" || -n "${ASICMINER_URL2-}" ]] && pools_count=2
	[[ -n "${ASICMINER_TEMPLATE3-}" || -n "${ASICMINER_URL3-}" ]] && pools_count=3

	# !!! ASICMINER_URL can be multi-line, up to 3 lines
	# use first pool on ASICMINER_URL, if not epmty ASICMINER_URL2 and ASICMINER_URL3
	# use first and second pool on ASICMINER_URL, if not empty ASICMINER_URL2 and empty ASICMINER_URL3
	pools='[]'
	first_url_count=3
	for url in $ASICMINER_URL; do
		pool='{}'
		# shellcheck disable=SC2016
		pool="$( jq --null-input \
			--argjson pool "$pool" --arg user "$ASICMINER_TEMPLATE" --arg url "$url" --arg pass "$ASICMINER_PASS" \
			'$pool + {$user,$url,$pass}'
		)"
#		pool="$( jq --null-input --argjson pool "$pool" --arg user "$ASICMINER_TEMPLATE" '$pool + {$user}' )"
#		pool="$( jq --null-input --argjson pool "$pool" --arg url "$url" '$pool + {$url}' )"
#		pool="$( jq --null-input --argjson pool "$pool" --arg pass "$ASICMINER_PASS" '$pool + {$pass}' )"
		# shellcheck disable=SC2016
		pools="$( jq --null-input --argjson pools "$pools" --argjson pool "$pool" '$pools + [$pool]' )"

		(( first_url_count == pools_count )) && break
		(( first_url_count-- ))
	done

	if [[ -n "${ASICMINER_TEMPLATE2-}" || -n "${ASICMINER_URL2-}" ]]; then
		pool='{}'
		# shellcheck disable=SC2016
		pool="$( jq --null-input \
			--argjson pool "$pool" --arg user "$ASICMINER_TEMPLATE2" --arg url "$ASICMINER_URL2" --arg pass "$ASICMINER_PASS2" \
			'$pool + {$user,$url,$pass}'
		)"
#		pool="$( jq --null-input --argjson pool "$pool" --arg user "$ASICMINER_TEMPLATE2" '$pool + {$user}' )"
#		pool="$( jq --null-input --argjson pool "$pool" --arg url "$ASICMINER_URL2" '$pool + {$url}' )"
#		pool="$( jq --null-input --argjson pool "$pool" --arg pass "$ASICMINER_PASS2" '$pool + {$pass}' )"
		# shellcheck disable=SC2016
		pools="$( jq --null-input --argjson pools "$pools" --argjson pool "$pool" '$pools + [$pool]' )"
	fi
	if [[ -n "${ASICMINER_TEMPLATE3-}" || -n "${ASICMINER_URL3-}" ]]; then
		pool='{}'
		# shellcheck disable=SC2016
		pool="$( jq --null-input \
			--argjson pool "$pool" --arg user "$ASICMINER_TEMPLATE3" --arg url "$ASICMINER_URL3" --arg pass "$ASICMINER_PASS3" \
			'$pool + {$user,$url,$pass}'
		)"
#		pool="$( jq --null-input --argjson pool "$pool" --arg user "$ASICMINER_TEMPLATE3" '$pool + {$user}' )"
#		pool="$( jq --null-input --argjson pool "$pool" --arg url "$ASICMINER_URL3" '$pool + {$url}' )"
#		pool="$( jq --null-input --argjson pool "$pool" --arg pass "$ASICMINER_PASS3" '$pool + {$pass}' )"
		# shellcheck disable=SC2016
		pools="$( jq --null-input --argjson pools "$pools" --argjson pool "$pool" '$pools + [$pool]' )"
	fi

	# shellcheck disable=SC2016
	pools="$( jq --null-input --argjson pools "$pools" '{$pools}' )"

	#innosilicon A5/A8
	if [[ "$ASIC_MODEL" == "T4.G19" ]]; then
		pools='{
			"Voltage": 175,
			"PoolNum": "1",
			"UserName1": null,
			"UserName2": null,
			"UserName3": null,
			"Pool3": null,
			"Pool2": null,
			"Pool1": null,
			"Frequency": 1100,
			"perflevel": "2",
			"vidmode": "1",
			"fanmode": "1",
			"fanspeed": "1",
			"Password2": null,
			"Password3": null,
			"Password1": null
		}'
		pools="${pools//$'\t'/}" # remove tabs
		pool_index=1
		for url in $ASICMINER_URL; do
			# shellcheck disable=SC2016
			{
				pools="$( jq --null-input --argjson pools "$pools" --arg "UserName${pool_index}" "$ASICMINER_TEMPLATE" '$pools + {$UserName'$pool_index'}' )"
				pools="$( jq --null-input --argjson pools "$pools" --arg "Pool${pool_index}" "$url" '$pools + {$Pool'$pool_index'}' )"
				pools="$( jq --null-input --argjson pools "$pools" --arg "Password${pool_index}" "$ASICMINER_PASS" '$pools + {$Password'$pool_index'}' )"
				pools="$( jq --null-input --argjson pools "$pools" --arg PoolNum "$pool_index" '$pools + {$PoolNum}' )"
			}
			(( pool_index++ ))
		done
	fi
	#innosilicon A5/A8 end

	case "$ASIC_MODEL" in
		'Antminer S9k'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "300",
				"bitmain-voltage": "950"
			}'
		;;

		'Antminer S9 SE'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "O",
				"bitmain-voltage": "950"
			}'
		;;

		'Antminer S9' | 'Antminer S9i' | 'Antminer S9 Hydro' | 'Antminer S9j' | 'Antminer S9'* | 'Antminer S10'* | 'Minecenter S9' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "550",
				"bitmain-voltage": "0706",
				"multi-version": "1"
			}'
		;;

		'Antminer A3' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "0"
			}'
		;;

		'Antminer D3' )
			config_global='{
				"api-listen": true,
			"api-network": true,
			"api-groups": "A:stats:pools:devs:summary:version",
			"api-allow": "A:0/0,W:*",
			"bitmain-use-vil": true,
			"bitmain-freq": "0"
			}'
		;;

		'Antminer D3 Blissz'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-reboot": true,
				"bitmain-fan-mode": "0",
				"bitmain-fan-pwm": "100",
				"bitmain-use-vil": true,
				"bitmain-freq": "469",
				"bitmain-voltage": "125",
				"bitmain-freq1": "0",
				"bitmain-voltage1": "0",
				"bitmain-freq2": "0",
				"bitmain-voltage2": "0",
				"bitmain-freq3": "0",
				"bitmain-voltage3": "0"
			}'
		;;

		'Antminer S9 (vnish'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "W:0/0",
				"bitmain-use-vil": true,
				"bitmain-autodownscale-watchtimer": true,
				"bitmain-autodownscale-timer": "24",
				"bitmain-autodownscale-after": "60",
				"bitmain-autodownscale-step": "2",
				"bitmain-autodownscale-min": "400",
				"bitmain-autodownscale-prec": "80",
				"bitmain-autodownscale-profile": "0",
				"bitmain-freq": "650",
				"bitmain-freq1": "0",
				"bitmain-freq2": "0",
				"bitmain-freq3": "0",
				"bitmain-voltage": "880",
				"bitmain-voltage1": "0",
				"bitmain-voltage2": "0",
				"bitmain-voltage3": "0",
				"bitmain-chip-freq": "0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0",
				"bitmain-fan-rpm-off": "0",
				"multi-version": "1"
			}'
		;;

		'Antminer L3+ ('* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-freq": "384",
				"bitmain-voltage": "135"
			}'
		;;

		'Antminer L3+'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "384"
			}'
		;;

		'Antminer L3++'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "450"
			}'
		;;

		'Antminer T9+'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version:noncenum",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "550",
				"multi-version": "1"
			}'
		;;

		'Antminer T9'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version:noncenum",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "",
				"bitmain-voltage": "0706",
				"multi-version": "1"
			}'
		;;

		'Antminer T17'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-work-mode": "0",
				"bitmain-freq": "O",
				"bitmain-voltage": "1700"
			}'
		;;

		'Antminer S17+ Hiveon'* | 'Antminer T17+'* |\
		'Antminer S17E'* | 'Antminer T17E'* |\
		'Antminer T17 Hiveon' | 'Antminer S17 Hiveon' |\
		'Antminer X17' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-fan-ctrl": false,
				"bitmain-fan-pwm": "100",
				"bitmain-work-mode": "1",
				"bitmain-use-vil": true,
				"bitmain-freq": "O",
				"bitmain-voltage": "1900"
			}'
		;;

		'Antminer S17+' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-work-mode": "0",
				"bitmain-freq": "O",
				"bitmain-voltage": "1900"
			}'
		;;

		'Antminer S15' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-fan-ctrl": false,
				"bitmain-fan-pwm": "100",
				"bitmain-use-vil": true,
				"bitmain-freq": "O",
				"bitmain-voltage": "1650"
			}'
		;;

		'Antminer S17'* | 'Antminer T15'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-work-mode": "2",
				"bitmain-use-vil": true,
				"bitmain-freq": "300",
				"bitmain-voltage": "1850"
			}'

		;;

		'Antminer ')
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "_ant_voltage=0706",
				"bitmain-voltage": "0706",
				"multi-version": "1"
			}'
		;;

		'Antminer E3' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "350",
				"bitmain-voltage": "0706",
				"multi-version": "1"
			}'
		;;

		'Antminer Z9'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "500"
			}'
		;;

		'Antminer X3' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "0"
			}'
		;;

		'Antminer S7' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "737",
				"bitmain-voltage": "0706"
			}'
		;;

		'Antminer S11' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "550",
				"bitmain-voltage": "0706"
			}'
		;;

		'Antminer Z11' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "W:0/0",
				"bitmain-use-vil": true,
				"bitmain-freq1": "0",
				"bitmain-freq2": "0",
				"bitmain-freq3": "0",
				"bitmain-freq": "500",
				"bitmain-voltage1": "0",
				"bitmain-voltage2": "0",
				"bitmain-voltage3": "0",
				"bitmain-voltage": "870"
			}'
		;;

		'Antminer Z11e' )
			#
			# pure defaults for "Wed Oct 23 11:07:07 CST 2019" fw:
			#
			# "api-listen": "true",
			# "api-network": "true",
			# "api-allow": "W:0/0",
			# "bitmain-freq": "18:218.75:1106",
			# "bitmain-voltage": "0725"
			#
			# and then after Save & Apply:
			#
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "18:218.75:1106"
			}'
		;;

		'Antminer Z11 Nitrous' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "W:0/0",
				"bitmain-use-vil": true,
				"bitmain-freq": "731"
			}'
		;;

		'Antminer DR3' )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*",
				"bitmain-use-vil": true,
				"bitmain-freq": "410"
			}'
		;;

		'b29+.g19' | 'd9.g19' | 's11.g19' )
			config_global='{
				"api-listen": true,
				"api-port": "4028",
				"api-allow": "R:0/0,W:127.0.0.1"
			}'
		;;

		'a9+.g19' )
			config_global='{
				"api-listen": true,
				"api-port": "4028",
				"api-allow": "R:0/0,W:127.0.0.1",
				"T1factory": true
			}'
		;;


		't3.soc' )
			config_global='{
				"api-allow": "R:0/0,W:127.0.0.1",
				"api-description": "cgminer 4.10.0",
				"api-listen": true,
				"api-mcast-addr": "224.0.0.75",
				"api-mcast-code": "FTW",
				"api-mcast-des": "",
				"api-mcast-port": "4028",
				"api-network": true,
				"api-port": "4028",
				"api-host": "0.0.0.0",
				"T1efficient": true,
				"T1adjust": "2",
				"T1Pll1": "822",
				"T1Pll2": "822",
				"T1Pll3": "822",
				"T1Pll4": "1332",
				"T1Pll5": "1332",
				"T1Pll6": "1332",
				"T1Pll7": "1332",
				"T1Pll8": "1332",
				"T1Volt1": "319",
				"T1Volt2": "319",
				"T1Volt3": "319",
				"T1Volt4": "404",
				"T1Volt5": "404",
				"T1Volt6": "404",
				"T1Volt7": "404",
				"T1Volt8": "404",
				"T1VID1": "29",
				"T1VID2": "29",
				"T1VID3": "29",
				"T1VID4": "0",
				"T1VID5": "0",
				"T1VID6": "0",
				"T1VID7": "0",
				"T1VID8": "0",
				"fallback-time": "120",
				"log": "5",
				"shares": "0",
				"suggest-diff": "0",
				"syslog": true,
				"text-only": true
			}'
		;;

		't1.g19' )
			config_global='{
				"api-allow": "R:0/0,W:127.0.0.1",
				"api-description": "cgminer 4.10.0",
				"api-listen": true,
				"api-mcast-addr": "224.0.0.75",
				"api-mcast-code": "FTW",
				"api-mcast-des": "",
				"api-mcast-port": "4028",
				"api-network": true,
				"api-port": "4028",
				"api-host": "0.0.0.0",
				"T1noauto": true,
				"fallback-time": "120",
				"log": "5",
				"shares": "0",
				"suggest-diff": "0",
				"syslog": true,
				"text-only": true
			}'
		;;

		't3h+.soc' | 't3+.soc' | 't2th+.soc' | 't2thf+.soc' | 't2thl+.soc' | 't2th.soc' |\
		't2tz.soc' | 't2thm.soc' | 't2thf.soc' | 't2t+.soc' | 't2ts.soc' | 't2ti.soc' | 't2t.soc' )
			config_global='{
				"api-listen": true,
				"api-port": "4028",
				"api-allow": "R:0/0,W:127.0.0.1",
				"T1factory": true
			}'
		;;

		'T4.G19')
			config_global='{}'
		;;

		'Zig Z1+' )
			config_global='{
				"api-allow": "W:0\/0",
				"api-description": "cgminer 4.11.1",
				"api-listen": true,
				"api-mcast-addr": "224.0.0.75",
				"api-mcast-code": "FTW",
				"api-mcast-des": "",
				"api-mcast-port": "4028",
				"api-network": true,
				"api-port": "4028",
				"expiry": "120",
				"failover-switch-delay": "300",
				"log": "5",
				"queue": "9999",
				"scan-time": "60",
				"shares": "0",
				"lyra2rev2-clk": "925",
				"lyra2rev2-asic-x": "4",
				"lyra2rev2-asic-y": "24",
				"lyra2rev2-asic-num": "50",
				"lyra2rev2-cutofftemperature": "50",
				"lyra2rev2-cutofffanspeedin": "100",
				"lyra2rev2-cutofffanspeedout": "100",
				"lyra2rev2-restarthashrate": "7",
				"lyra2rev2-restartfailedcount": "100",
				"lyra2rev2-check-testnonce": true,
				"lyra2rev2-machine-type": "1",
				"lyra2rev2-scan-serial": "\/dev\/ttyS3",
				"lyra2rev2-restartenable": true,
				"lyra2rev2-cutoffenable": false,
				"lyra2rev2-fan": "LV1",
				"lyra2rev2-dynamic-frequency": true
			}'
		;;

		'Zig Z1' )
			config_global='{
				"api-allow": "W:0\/0",
				"api-description": "cgminer 4.11.1",
				"api-listen": true,
				"api-mcast-addr": "224.0.0.75",
				"api-mcast-code": "FTW",
				"api-mcast-des": "",
				"api-mcast-port": "4028",
				"api-network": true,
				"api-port": "4028",
				"expiry": "120",
				"failover-switch-delay": "300",
				"log": "5",
				"queue": "9999",
				"scan-time": "60",
				"shares": "0",
				"quiet": true,
				"lyra2rev2-fan": "LV1",
				"lyra2rev2-clk": "900",
				"lyra2rev2-asic-x": "4",
				"lyra2rev2-asic-y": "24",
				"lyra2rev2-asic-num": "50",
				"lyra2rev2-cutofftemperature": "50",
				"lyra2rev2-cutofffanspeedin": "100",
				"lyra2rev2-cutofffanspeedout": "100",
				"lyra2rev2-restarthashrate": "7",
				"lyra2rev2-restartfailedcount": "100",
				"lyra2rev2-check-testnonce": true,
				"lyra2rev2-machine-type": "85",
				"lyra2rev2-scan-serial": "\/dev\/ttyS3",
				"lyra2rev2-restartenable": false,
				"lyra2rev2-cutoffenable": false,
				"lyra2rev2-fan-check": true
			}'
		;;

		'Toddminer C1'* )
			config_global='{
				"algo": "ckb",
				"api-bind": "0.0.0.0:4049",
				"threads": 1,

				"benchmark": false,
				"debug": false,
				"protocol": false,
				"show-diff": false,
				"quiet": false,

				"platform": "asic",
				"chip_start": 0,
				"chip_num": 30,
				"chip_step": 0,
				"baud": 115200,
				"uart": "/dev/ttyS0",
				"fbdiv": 102,
				"vid": 0,

				"worknamemode": "noip",
				"worknameplace1": "user",
				"worknameplace2": "user",
				"worknameplace3": "user"
			}'
		;;

		'Blackminer F1'* )
			config_global='{
				"api-listen": true,
				"api-network": true,
				"fan-ctrl": true,
				"fan-pwm": "0",
				"use-vil": true,
				"freq": "420",
				"coin-type": "ckb",
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*"
			}'
		;;

		*)
			config_global='{
				"api-listen": true,
				"api-network": true,
				"api-groups": "A:stats:pools:devs:summary:version",
				"api-allow": "A:0/0,W:*"
			}'
			echo_warning "Unknown model '$ASIC_MODEL', using generic config" 1>&2
		;;
	esac

	config_global="${config_global//$'\t'/}" # remove tabs

	# merge user config options into main config
	if [[ -n "$ASICMINER_USER_CONFIG" ]]; then
		while read -r line; do
			[[ -z "$line" ]] && continue # skip empty lines
			varkey="$( echo "$line" | sed s/,$// | awk '{print "{"$0"}"}' | jq --raw-output 'to_entries[] | .key' )"
			varval="$( echo "$line" | sed s/,$// | awk '{print "{"$0"}"}' | jq --raw-output 'to_entries[] | .value' )"
			#config_global="$( jq '."'$varkey'"="'$varval'"' <<< "$config_global" )"
			config_global="$( jq ".\"$varkey\"=\"$varval\"" <<< "$config_global" )"
		done <<< "$ASICMINER_USER_CONFIG"
	fi

	config_global="${config_global//\"true\"/true}"
	config_global="${config_global//\"false\"/false}"

	if [[ "$ASIC_MODEL" == 'Toddminer C1'* ]]; then
		# shellcheck disable=SC2016
		pools="$( jq --null-input --argjson g "$config_global" \
			--arg url1	"$( jq --raw-output '.pools[0].url'		<<< "$pools" )" \
			--arg user1	"$( jq --raw-output '.pools[0].user'	<<< "$pools" )" \
			--arg pass1	"$( jq --raw-output '.pools[0].pass'	<<< "$pools" )" \
			--arg url2	"$( jq --raw-output '.pools[1].url'		<<< "$pools" )" \
			--arg user2	"$( jq --raw-output '.pools[1].user'	<<< "$pools" )" \
			--arg pass2	"$( jq --raw-output '.pools[1].pass'	<<< "$pools" )" \
			'{url:$url1, user:$user1, pass:$pass1,backup_url:$url2,backup_user:$user2,backup_pass:$pass2}'
		)"
	fi

	# shellcheck disable=SC2016
	final_configuration="$( jq --null-input --argjson g "$config_global" --argjson p "$pools" '$p * $g' )"

	# legacy vars, should all be set as "dummy"
	# ??? I'd say we should ditch it for good
	[[ -z "${EWAL-}" && -z "${ZWAL-}" && -z "${DWAL-}" ]] && echo_error "No WAL address is set"

	# shellcheck disable=SC2034,SC2153
	WORKER_NAME_RAW="$WORKER_NAME" # a special template to get around a forced worker name sanitizing, if needed

	#replace %template% with its value in a whole file
	# !!! legacy, might have to remove it sometimes
	for this_template_label in EWAL DWAL ZWAL EMAIL WORKER_NAME WORKER_NAME_RAW; do
		local -n this_template_value="$this_template_label"
		this_template_placeholder="%${this_template_label}%"
		[[ -n "$this_template_value" ]] && final_configuration="${final_configuration//${this_template_placeholder}/${this_template_value}}"
	done

	# shellcheck disable=SC2034
	# bc var have set by reference
	function_result_by_ref="$final_configuration"
}


# global sources

source asic-model || die '/hive/bin/asic-model not found' 1
source colors


# global consts

declare -r RIG_CONF_default='/hive-config/rig.conf'
declare -r RIG_CONF="${RIG_CONF:-$RIG_CONF_default}" # for ASIC emulator: set to default only if RIG_CONF variable is empty
declare -r WALLET_CONF='/hive-config/wallet.conf'
declare -r MINER_CONFIG="$CONFIG_PATH"


# global enums

# compare_configs_ENUM
declare -r -i compare_NONE=0
declare -r -i compare_FULL=1
declare -r -i compare_POOLS=2

# worker_name_validity_ENUM
declare -r -i worker_name_VALID=0
declare -r -i worker_name_ALMOST_VALID=1
declare -r -i worker_name_NOT_VALID=2
declare -r -i worker_name_EMPTY=3

# global flags

declare -i save_config_FLAG is_verbose_FLAG compare_configs_ENUM


# global vars

declare -i script_exitcode=0
declare generated_miner_configuration key_filter


# main

parse_arguments "$@"

echo_info "${YELLOW-}$script_mission, version $script_version"

[[ ! -f "$RIG_CONF" ]] && die "Rig config $RIG_CONF not found" 1
[[ ! -f "$WALLET_CONF" ]] && die "Wallet $WALLET_CONF not found" 1

source "$RIG_CONF"
source "$WALLET_CONF"

[[ -z "${ASICMINER_TEMPLATE-}" ]] && die 'ASICMINER_TEMPLATE is empty (no Flight Sheet?)' 1
[[ -z "${ASICMINER_URL-}" ]] && die 'ASICMINER_URL is empty' 1

echo_action 'Generating miner config from the Flight Sheet'
if generate_miner_configuration_to 'generated_miner_configuration' && [[ -n "$generated_miner_configuration" ]]; then
	: ok good to go
else
	die 'Cannot generate config, exiting' 1
fi

if (( ! compare_configs_ENUM )); then
	if (( is_verbose_FLAG )); then
		key_filter='.' # show a full config
	else
		key_filter='.pools' # show a short config -- only pools section
	fi

	if jq "$key_filter" <<< "$generated_miner_configuration" 2> /dev/null; then
		if (( save_config_FLAG )); then
			echo_action "Updating $MINER_CONFIG"
			jq '.' <<< "$generated_miner_configuration" > "$MINER_CONFIG"
			chmod 644 "$MINER_CONFIG" # -rw-rw-r--
		else
			echo_warning "Dry run, updating $MINER_CONFIG skipped"
		fi
	else
		echo_error "Invalid configuration generated: '$generated_miner_configuration'. Writing to the miner config skipped. Please contact Hive support."
	fi
else
	case "$compare_configs_ENUM" in
		"$compare_POOLS")
			key_filter='.pools'
			echo_action 'Comparing generated config vs actual miner config (pools section only)'
		;;
		"$compare_FULL")
			key_filter='.'
			echo_action 'Comparing generated config vs actual miner config (full compare)'
		;;
	esac

	if [[ -s "$MINER_CONFIG" ]]; then
		temp_FS_config="/tmp/$( basename "$MINER_CONFIG" ).flightsheet.tmp"
		temp_actual_config="/tmp/$( basename "$MINER_CONFIG" ).actual.tmp"

		jq "$key_filter" --sort-keys <<< "$generated_miner_configuration" > "$temp_FS_config"
		jq "$key_filter" --sort-keys < "$MINER_CONFIG" > "$temp_actual_config"

		if diff_result="$( diff "$temp_actual_config" "$temp_FS_config" )"; then
			echo_ok 'Configs are OK (identical)'
			script_exitcode=0
		else
			echo_warning 'Configs are DIFFERENT'
			(( is_verbose_FLAG )) && echo "$diff_result"
			script_exitcode=2
		fi
		rm "$temp_FS_config" "$temp_actual_config"
	else
		echo_error "$MINER_CONFIG not found or empty. Generate it first."
		script_exitcode=1
	fi
fi

exit $(( script_exitcode ))
