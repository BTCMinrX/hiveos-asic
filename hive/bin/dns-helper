#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


readonly script_mission='Client for ASICs: DNS helper for udhcpc'
readonly script_version='0.0.4'
readonly script_basename="${0##*/}"
#
readonly script_DEBUG="${script_DEBUG:-1}" # use value from env if exists


# !!! bash strict mode, no unbound variables
set -o nounset


# functions

function echo_with_timestamp {
	printf '%(%F %T)T %s\n' -1 "$@"
}

function is_hook_dir_exist {
	[[ -d "$hook_DIR" ]]
}

function install_hook {
	#
	# Usage: install_hook
	#
	# install/reinstall a symlink to this very script right to the udhcpc hook directory
	#

	# consts
	local -r hook_FILE_name='69hive'
	local -r hook_FILE="${hook_DIR}/${hook_FILE_name}"
	local -r target_FILE="$0"
	
	# code
	if is_hook_dir_exist; then
		[[ -e "$hook_FILE" ]] && rm -rf "${hook_FILE:-SAFE}"
		ln -s "$target_FILE" "$hook_FILE" || return 1
	else
		# no udhcpc hook dir found
		return 1
	fi
}


# args

declare -r udhcp_event="${1-}"


# consts

declare -r RESOLV_CONF='/etc/resolv.conf'
declare -r hook_DIR='/etc/udhcpc.d'
declare -r debug_log_DEFAULT="/tmp/${script_basename}.log"
declare -r -a public_nameservers_collection=(
	'8.8.8.8'
	'1.1.1.1'
)


# flags

declare -i is_verbose_ARG=0 is_install_ARG=0


# vars

declare own_log this_public_nameserver


# main()

[[ "${PATH-}" =~ (^|:)/hive/bin:/hive/sbin(:|$) ]] || export PATH="${PATH-}:/hive/bin:/hive/sbin" # add only if not exist
[[ "${LD_LIBRARY_PATH-}" =~ (^|:)/hive/lib(:|$) ]] || export LD_LIBRARY_PATH="${LD_LIBRARY_PATH-}${LD_LIBRARY_PATH:+:}/hive/lib" # save $LD_LIBRARY_PATH:/hive/share/S9/lib for hiveon

if [[ "$udhcp_event" == 'verbose' ]]; then
	own_log='/dev/stdout'
elif (( script_DEBUG )); then
	own_log="$debug_log_DEFAULT"
else
	own_log='/dev/null'
fi

{
	# assert
	[[ -n "$udhcp_event" ]] || { echo_with_timestamp "Error: should be called from udhcpc"; exit 1; }

	echo_with_timestamp "DHCP event '$*' received, $RESOLV_CONF:"
	cat "$RESOLV_CONF"

	case "$udhcp_event" in
		'bound' | 'renew' | 'verbose' )
			# list all DHCP parameters
			declare this_dhcp_parameter_name all_dhcp_parameters
			for this_dhcp_parameter_name in	interface	ip			siaddr		sname		boot_file	subnet	\
											timezone	router		timesvr		namesvr		dns			logsvr	\
											cookiesvr	lprsvr		hostname	bootsize	domain		swapsvr	\
											rootpath	ipttl		mtu			broadcast	ntpsrv		wins	\
											lease		dhcptype	serverid	message		tftp		bootfile; do
				declare -n this_dhcp_parameter_value="$this_dhcp_parameter_name"
				[[ -n "${this_dhcp_parameter_value-}" ]] && all_dhcp_parameters+="$this_dhcp_parameter_name='${this_dhcp_parameter_value-}' "
			done
			if [[ -n "${all_dhcp_parameters-}" ]]; then
				echo_with_timestamp "DHCP parameters: $all_dhcp_parameters"
			else
				echo_with_timestamp "No DHCP parameters received"
			fi

			# add 8.8.8.8 and 1.1.1.1 to resolv.conf
			echo_with_timestamp 'Adding fail-over nameservers to resolver...'
			if [[ -s "$RESOLV_CONF" ]]; then
				if grep -q '^nameserver 0\.0\.0\.0$' "$RESOLV_CONF"; then
					echo_with_timestamp 'Broken nameserver 0.0.0.0 REMOVED'
					sed -i '/^nameserver 0\.0\.0\.0$/d' "$RESOLV_CONF"
				fi
				for this_public_nameserver in "${public_nameservers_collection[@]}"; do
					if grep -q "^nameserver $this_public_nameserver\$" "$RESOLV_CONF"; then
						echo_with_timestamp "Fail-over nameserver $this_public_nameserver ALREADY SET"
					else
						echo_with_timestamp "Fail-over nameserver $this_public_nameserver ADDED"
						printf 'nameserver %s\n' "$this_public_nameserver" >> "$RESOLV_CONF"
					fi
				done
			else
				echo_with_timestamp "Error: $RESOLV_CONF not found or empty"
			fi

			if (( script_DEBUG )); then
				if /hive/bin/message info "DHCP updated" --payload --silent < "$RESOLV_CONF"; then
					echo_with_timestamp 'Message to the dashboard has been sent'
				else
					echo_with_timestamp 'Error: message to the dashboard has NOT been sent'
				fi
			fi
		;;

		*)
			echo_with_timestamp "Nothing to do, $RESOLV_CONF update skipped"
		;;

	esac

} >> "$own_log" 2>&1

exit 0
