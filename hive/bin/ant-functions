#!/usr/bin/env bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE
#


declare -r library_mission='Antminer and Hiveon functions'
declare -r library_version='0.1.0'


# !!! bash strict mode, no unbound variables

#set -o nounset # !!! this is a library, so we don't want to break the other's scripts


#
# functions: script infrastructure
#

#base
function print_script_version {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

#
# functions: audit
#
# we need to audit externally--does the script work as intended or not (like the system returns exitcode "file not found")
# [[ $( script_to_audit ) != 'I AM FINE' ]] && echo "Something wrong with $script_to_check"
#

function print_i_am_doing_fine_then_exit () {
	#
	# Usage: print_i_am_fine_and_exit
	#

	# code

	echo "$__audit_ok_string"
	exit $(( exitcode_OK ))
}

#base
function is_function_exist {
	#
	# Usage: is_function_exist 'function_name'
	#
	# stdin: none
	# stdout: none
	# exit code: boolean
	#

	# args

	(( $# != 1 )) && { errcho 'invalid number of arguments'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r function_name="$1"

	# code

	declare -F -- "$function_name" >/dev/null
}

#base
function __list_functions {
	#
	# List all functions but started with '_'
	#

	# consts

	local -r private_function_attribute_RE='^_'

	# vars

	local function_name=''
	local -a all_functions=()
	local -a private_functions=()
	local -a public_functions=()

	# code

	all_functions=( $( compgen -A function ) )

	for function_name in "${all_functions[@]}"; do
		if [[ "${function_name}" =~ $private_function_attribute_RE ]]; then
			private_functions+=("$function_name")
		else
			public_functions+=("$function_name")
		fi
	done

	if (( ${#private_functions[@]} != 0 )); then
		echo "${#private_functions[@]} private function(s):"
		echo
		printf '%s\n' "${private_functions[@]}"
		echo
	fi

	echo "${#public_functions[@]} public function(s):"
	echo
	printf '%s\n' "${public_functions[@]}"
	echo
}


#ant functions

#get status
function hiveon_status () {
HIVEON_VERSION="123"
	#
	# Usage: hiveon_status '{JSON}'
	#
	(( $# > 1 )) && { errcho 'invalid number of arguments'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r input_text="${1:-$( < /dev/stdin )}" # get from arg or stdin

	system_status=$(jq -r '.[0].Type' <<< "$input_text")

	if [[ -n $system_status ]]; then
		if $(echo "$system_status" | grep -v "S9 6-boards" | grep -q "(" ); then
			system_status="$(echo $system_status | grep '(' | sed 's/.*(\|).*//g')"
		else
			system_status="mining"
		fi
	fi

	#Hiveon before 17 series
	if [[ $system_status == "mining" && -n "$HIVEON_VERSION" ]]; then
		local tune_board=0
		local tune_chip=0
		if [ -e /www/pages/cgi-bin/check-auto-tune-running.cgi ]; then
			tune_board=$(sh /www/pages/cgi-bin/check-auto-tune-running.cgi)
		fi
		if [ -e /www/pages/cgi-bin/check-auto-chip-tune-running.cgi ]; then
			tune_chip=$(sh /www/pages/cgi-bin/check-auto-tune-running.cgi)
		fi

		if [[ $tune_board -eq 1 || $tune_chip -eq 1 ]]; then
			system_status="tuning"
		fi
	fi

	echo $system_status

}

source asic-model || echo 'ERROR: /hive/bin/asic-model not found'

# consts

declare -r __audit_ok_string='I AM DOING FINE'
# shellcheck disable=SC2034
declare -r -i exitcode_OK=0
declare -r -i exitcode_ERROR_NOT_FOUND=1
declare -r -i exitcode_ERROR_IN_ARGUMENTS=127
# shellcheck disable=SC2034
declare -r -i exitcode_ERROR_SOMETHING_WEIRD=255

declare -r -i exitcode_IS_EQUAL=0
declare -r -i exitcode_GREATER_THAN=1
declare -r -i exitcode_LESS_THAN=2

# main

if ! ( return 0 2>/dev/null ); then # not sourced

	declare -r script_mission="$library_mission"
	declare -r script_version="$library_version"

	case "$*" in
		'')
			source colors
			print_script_version
			__list_functions
			;;
		*)
			if is_function_exist "$1"; then
				"$@" # potentially unsafe
			else
				errcho "function '$1' is not defined"
			fi
			;;
	esac
fi
