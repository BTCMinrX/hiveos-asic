#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


readonly script_mission='Client for ASICs: agent-screen helper'
readonly script_version='1.0.5'
readonly script_basename="$( basename "$0" )"
readonly DEBUG=0


#
# !!! also can be started from cron and on startup !!!
#


# !!! bash strict mode, no unbound variables

set -o nounset


# functions

errcho() {
	# uniform error logging to stderr
	echo -e "Error in $0:${FUNCNAME[1]}(): $*"
} 1>&2

# functions: screen

is_screen_session_exist() {
	# is_screen_session_exist 'session name'

	# args

	if (( $# != 1 )); then
		errcho "only 1 argument allowed"
		return "$exitcode_ERROR_IN_ARGUMENTS"
	fi

	local -r session_name="${1-}"
	local -i screen_exitcode="$exitcode_OK"
	
	# code
	
	if (( DEBUG )); then
		screen -S "$session_name" -X select .
	else
		screen -S "$session_name" -X select . > /dev/null
	fi
	screen_exitcode=$?

	return "$screen_exitcode"
}

screen_attach_to_session() {
	# screen_attach_to_session 'session name'

	# args
	
	if (( $# != 1 )); then
		errcho "only 1 argument allowed"
		return "$exitcode_ERROR_IN_ARGUMENTS"
	fi

	local -r session_name="${1-}"

	# code
	
	if is_screen_session_exist "$session_name"; then
		#
		# why setting TERM in such a fashion? screen has an argument for that:
		#
		# -T term       Use term as $TERM for windows, rather than "screen".
		#
		if (( DEBUG )); then
			TERM='vt102' screen -x -S "$session_name"
		else
			TERM='vt102' screen -x -S "$session_name" > /dev/null
		fi
	else
		errcho "'$session_name' hasn't been started. Weird..."
	fi
}

screen_start_session() {
	# screen_start_session 'cmd' [args...]

	# args

	if (( $# == 0 )); then
		errcho "no arguments given"
		return "$exitcode_ERROR_IN_ARGUMENTS"
	fi
	
	local -r cmd="${1-}"
	local -r args="${*:2}"

	# consts
	
	local -r session_name="$cmd"
	local -r -i retries_limit=100
	
	# vars
	
	local -i retries_counter
	local -i function_exitcode="$exitcode_OK"

	# code
	
	if ! which "$cmd" > /dev/null; then
		errcho "cannot locate command '$cmd' to run in the screen session"
		return "$exitcode_ERROR_CMD_NOT_FOUND"
	fi

	retries_counter=0
	until is_screen_session_exist "$session_name"; do
		if (( retries_counter > 0 )); then
			{ sleep 0.5 || usleep 500000 || sleep 1; } 2> /dev/null # only integer sleep on BusyBox
		#else
			# skip 'sleep' at the first iteration
		fi

		if (( DEBUG )); then
			screen -dm -S "$session_name" "$cmd" $args
		else
			screen -dm -S "$session_name" "$cmd" $args > /dev/null
		fi
	
		(( retries_counter++ ))

		if (( retries_counter % 10 == 0 )); then
			[[ -t 1 ]] && printf '\r'
			printf 'Waiting for %s screen session to start... Attempt #%d' "$session_name" "$retries_counter"
		fi

		if (( retries_counter >= retries_limit )); then
			[[ -t 1 ]] && printf '\n'
			errcho "'$session_name' hasn't been started. Weird..."
			function_exitcode="$exitcode_ERROR_SOMETHING_BAD_HAPPEN"
			break
		fi
	done

	return "$function_exitcode"
}

screen_stop_session() {
	# screen_stop_session 'session name' -> $?
	
	# args
	
	if (( $# == 0 )); then
		errcho "no arguments given"
		return "$exitcode_ERROR_IN_ARGUMENTS"
	fi

	local -r session_name="${1-}"
	
	# consts
	
	local -r -i retries_limit=100
	
	# vars
	
	local -i retries_counter
	local -i function_exitcode="$exitcode_OK"
	
	# code
	
	retries_counter=0
	while is_screen_session_exist "$session_name"; do
		if (( retries_counter > 0 )); then
			{ sleep 0.5 || usleep 500000 || sleep 1; } 2> /dev/null # only integer sleep on BusyBox
		#else
			# skip 'sleep' at the first iteration
		fi

		if (( DEBUG )); then
			screen -S "$session_name" -X quit
		else
			screen -S "$session_name" -X quit > /dev/null
		fi

		(( retries_counter++ ))

		if (( retries_counter % 10 == 0 )); then
			[[ -t 1 ]] && printf '\r'
			printf 'Waiting for %s screen session to stop... Attempt #%d' "$session_name" "$retries_counter"
			rm -rf /var/run/screens/*."$session_name"
			screen -wipe
		fi

		if (( retries_counter >= retries_limit )); then
			[[ -t 1 ]] && printf '\n'
			errcho "cannot stop '$session_name' in $retries_limit attempts. Zombie screen session?"
			{ ls -ALl /var/run/screens/*; ps w; } | message warn 'screen session goes zombie, please contact support' payload
			function_exitcode="$exitcode_ERROR_SOMETHING_BAD_HAPPEN"
			break
		fi
	done

	return "$function_exitcode"
}

# functions: agent

agent_start() {
	# args
	
	local -r message_mode="${1-}"

	# code

	if ! is_screen_session_exist 'agent'; then
		echo -n "> Starting new agent screen session... "
		screen_start_session 'agent' && echo "Started." || echo "Error."
	else
		if [[ $message_mode != '--quiet-ok' ]]; then
			echo "Agent screen session is already running"
		fi
	fi
}

agent_stop() {
	if is_screen_session_exist 'agent'; then
		echo -n "> Stopping agent screen session... "
		screen_stop_session 'agent' && echo "Stopped." || echo "Error."
	else
		echo "Agent screen session hasn't been running"
	fi
}

agent_restart() {
	echo "> Restarting agent screen session"
	agent_stop
	agent_start
}


# global consts

declare -r -i exitcode_OK=0
declare -r -i exitcode_ERROR_IN_ARGUMENTS=128
declare -r -i exitcode_ERROR_CMD_NOT_FOUND=100
declare -r -i exitcode_ERROR_SOMETHING_BAD_HAPPEN=1
declare -r -i script_exitcode_OK_RUNNING=0
declare -r -i script_exitcode_OK_NOT_RUNNING_STARTED=1


# global vars

# exitcode=0 - has been running
# exitcode=1 - has not been running, starting
declare -i script_exitcode


# global exports

export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib


# main()

trap -- 'errcho "SIGHUP received, ignoring..."' SIGHUP

is_screen_session_exist 'agent'; script_exitcode=$?

case "${1-}" in
	'start')						agent_start				;;
	'stop')							agent_stop				;;
	'restart')						agent_restart			;;
	'dontattach' | 'daemonize')		agent_start --quiet-ok	;;

	'log')
		screen -S agent -X hardcopydir /tmp
		screen -S agent -X -p0 hardcopy
		if [[ -f /tmp/hardcopy.0 ]]; then
			cat /tmp/hardcopy.0
			rm /tmp/hardcopy.0
		fi
		script_exitcode=0
	;;

	'attach' | *)
		agent_start
		screen_attach_to_session 'agent'
	;;
esac

exit $(( script_exitcode ))
