#!/usr/bin/env bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE
#


#export PATH="./:/hive/bin:/hive/sbin:$PATH"

SLEEP=10 #seconds to sleep over iteration
OK_MESSAGE_REDUCE=$(( 1 * 60 / SLEEP )) #e.g. only every 12th message will be displayed to reduce log

RIG_CONF="/hive-config/rig.conf"

[[ -t 1 ]] && . /hive/bin/colors


function loadconf() {
	WD_ENABLED=

	if [[ ! -f $RIG_CONF ]]; then
		echo -e "${RED}Config file $RIG_CONF not found${NOCOLOR}"
		echo "Exiting"
		exit 1
	else
		. "$RIG_CONF"
	fi


	if [[ -z $WD_ENABLED || $WD_ENABLED -ne 1 ]]; then
		printf '%(%F %T %z)T %s: ' -1 'watchdog'
		echo -e "${YELLOW}Watchdog not enabled (WD_ENABLED=$WD_ENABLED), exiting${NOCOLOR}"
		exit 0
	fi

	minhash=`echo $WD_MINHASHES | jq -r ".\"$MINER\""`
	if [[ -z $minhash || $minhash == "null" ]]; then
		message warn "Minimal hashrate for $MINER is not set"
		printf '%(%F %T %z)T %s: ' -1 'watchdog'
		echo -e "${RED}Minimal hashrate for $MINER is not set in config, exiting${NOCOLOR}"
		exit 1
	fi
}


function set_lastgood() {
	#lastgood=`date +%s`
	[[ -e /run/hive/khs ]] &&
#		lastgood=`stat -c %Y /run/hive/khs` ||
		lastgood=`date -r /run/hive/khs +%s` ||
		#lastgood=0 can't set it to 0, in case of boot agent may be late
		lastgood=`date +%s` #let's count from now

	miner_restart_count=0
}


set_lastgood
ok_count=0
function loop() {
	#echo -n "[`date`] "

	loadconf

	khs=
	[[ -e /run/hive/khs ]] && khs=`cat /run/hive/khs`
	[[ -z $khs ]] && khs=0


	hash_is_ok=`echo "$khs $minhash" | awk '{ print ($1 >= $2) ? 1 : 0 }'` #float comparison

	if (( hash_is_ok )); then
		set_lastgood
		if (( ok_count == 0 )); then
			printf '%(%F %T %z)T %s: ' -1 'watchdog'
			echo -e "${GREEN}OK${NOCOLOR} ${CYAN}$MINER${NOCOLOR} $khs kHs >= $minhash kHs"
		fi
		(( ++ok_count >= OK_MESSAGE_REDUCE )) && ok_count=0
		return
	fi


	now=`date +%s`
	elapsed=$(( now - lastgood ))
	#echo Elapsed $elapsed seconds

	printf '%(%F %T %z)T %s: ' -1 'watchdog'
	echo -e "${RED}BARK${NOCOLOR} ${CYAN}$MINER${NOCOLOR} $khs kHs < $minhash kHs for $elapsed seconds"

	#Check to reboot first
	if [[ ! -z $WD_REBOOT ]]; then
		reboot_timeout=`echo "$WD_REBOOT 60" | awk '{print $1 * $2}'`
		if [[ $elapsed -ge $reboot_timeout ]]; then
			message danger "$MINER low hashrate ($khs kH/s), rebooting"
			printf '%(%F %T %z)T %s: ' -1 'watchdog'
			echo -e "---"
			printf '%(%F %T %z)T %s: ' -1 'watchdog'
			echo -e "${RED}Rebooting after $WD_REBOOT minutes${NOCOLOR}"
			printf '%(%F %T %z)T %s: ' -1 'watchdog'
			echo -e "---"
			#sreboot
			nohup bash -c 'reboot' > /tmp/nohup.log 2>&1 &
			return #for testing and if it does not work)
		fi
	fi

	#Check to restart miner
	if [[ ! -z $WD_MINER ]]; then
		miner_restart_timeout=`echo "$WD_MINER 60" | awk '{print $1 * $2}'`
		if [[ $miner_restart_count -eq 0 && $elapsed -ge $miner_restart_timeout ]]; then
			message warn "$MINER low hashrate ($khs kH/s), restarting"
			printf '%(%F %T %z)T %s: ' -1 'watchdog'
			echo -e "---"
			printf '%(%F %T %z)T %s: ' -1 'watchdog'
			echo -e "${YELLOW}Restarting ${CYAN}$MINER${NOCOLOR} ${YELLOW}after $WD_MINER minutes${NOCOLOR}"
			printf '%(%F %T %z)T %s: ' -1 'watchdog'
			echo -e "---"
			miner_restart_count=1
			/hive/bin/miner restart
		fi
	fi
}


########################################################################################################################

case "$1" in
	run)
		loadconf
		printf '%(%F %T %z)T %s: ' -1 'watchdog'
		echo "MINER RESTART: $WD_MINER minutes"
		printf '%(%F %T %z)T %s: ' -1 'watchdog'
		echo "WORKER REBOOT: $WD_REBOOT minutes"
		while true; do
			loop
			sleep $SLEEP
		done
	;;
	stop)
		ps w | grep 'wd' | grep -v grep | awk '{print $1}' | xargs kill
	;;
	start)
		/hive/bin/wd run
	;;
	restart)
		/hive/bin/wd stop
		/hive/bin/wd run
	;;
	log)
		echo "TODO"
		#journalctl -u hive-watchdog --no-pager $2 $3 $4 $5 $6 $7
	;;
	status)
		/hive/bin/wd log
	;;
	*)
		bname=`basename $0`
		echo -e "${YELLOW}Hashrate Watchdog${NOCOLOR}"
		echo -e "Usage: ${CYAN}$bname start|stop|restart|log|status${NOCOLOR}"
	;;
esac
