#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.3.7
#


# !!! bash strict mode, no unbound variables
#set -o nounset


# Sends hello to Hive, receives config files, restarts miner
readonly script_mission='Client for ASICs: Say hello to the server'
readonly script_version='0.2.3'
readonly script_basename="${0##*/}"
#
readonly script_DEBUG="${script_DEBUG:-0}" # use value from env if exists


# functions

function echo_ok		{ echo -e "${LGRAY-}${script_basename}: ${BGREEN-}${*}${NOCOLOR-}"; }
function echo_action	{ echo -e "${LGRAY-}${script_basename}> ${WHITE-}${*}...${NOCOLOR-}"; }
function echo_info		{ echo -e "${LGRAY-}${script_basename}: ${NOCOLOR-}${*}"; }
function echo_warning	{ echo -e "${LGRAY-}${script_basename}: ${BYELLOW-}${*}${NOCOLOR-}"; }
function echo_debug		{ echo -e "${LGRAY-}${script_basename}: ${BPURPLE-}[DEBUG] ${*}${NOCOLOR-}"; } 1>&2
function echo_error		{ echo -e "${RED-}${script_basename}: ${BRED-}${*}${NOCOLOR-}"; } # 1>&2 # commented temporary, for cgi-bin script

function die {
	# !!! must be the first line in this function to catch the incoming error code -- do not move
	local -r incoming_exitcode=$?

	# args
	local -r message="$1"
	local -r exitcode="${2:-$incoming_exitcode}"

	# code
	[[ -n "$message" ]] && echo_error "$message"
	exit $(( exitcode ))
}

function print_script_version {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function print_script_usage {
	echo -e "Usage: ${CYAN-}${script_basename} [boot] [hostname] [restartminer]${NOCOLOR-}"
	echo
}

function parse_arguments {
	# vars
	local this_argument

	# code
	for this_argument in "$@"; do
		case "$this_argument" in
			'boot')
				arg_boot_FLAG=1
				echo_info '[OPTION] Boot mode ON'
			;;

			'hostname')
				arg_hostname="$( hostname )"
				echo_info "[OPTION] Using '$arg_hostname' as a worker name"
			;;

			'restartminer')
				arg_restartminer_FLAG=1
				echo_info '[OPTION] Miner will be restarted'
			;;

			'')
				: ok good to go
			;;

			'-h'|'--help')
				print_script_usage
				exit 0
			;;

			*)
				print_script_usage
				die "Unknown argument '$this_argument'" 1
			;;
		esac
	done
}

function is_JSON_string_empty_or_null {
	# args
	local -r JSON_string="$1"

	# code
	[[ -z "$JSON_string" || "$JSON_string" == 'null' ]]
}

function is_JSON_string_not_empty_or_null {
	# args
	local -r JSON_string="$1"

	# code
	[[ -n "$JSON_string" && "$JSON_string" != 'null' ]]
}

function is_interface_up {
	# args
	local -r if_to_check="$1"

	# code
	if [[ ! -d "/sys/class/net/${if_to_check}" ]]; then
		echo_error "No such interface: $if_to_check"
		return 2
	else
		[[ $( < "/sys/class/net/${if_to_check}/operstate" ) == 'up' ]]
	fi
}

function rematch {
	# actually we don't have to use pure bash eh?
	# rematch 'regex' ['string']

	# args
	local -r regex="$1"
	local -r string="${2:-$( </dev/fd/0 )}" # get from arg or stdin

	# code
	[[ "$string" =~ $regex ]]
	printf '%s\n' "${BASH_REMATCH[@]:1}"
}

function jq_raw_input_then_slurp {
	#
	# Usage: jq_raw_input_then_slurp 'filename'|- 'JSON_template'
	#

	# args
	local -r file="$1"
	local -r JSON_template="$2"

	# code
	if [[ "$file" == '-' ]]; then
		jq --raw-input '.' | jq --slurp --compact-output "$JSON_template"
	else
		jq --raw-input '.' < "$file" | jq --slurp --compact-output "$JSON_template"
	fi
}

function print_JSON_with_header {
	#
	# Usage: print_JSON_with_header 'header' 'JSON' ['max_lines']
	#

	# args
	local -r header="$1"
	local -r expected_JSON="$2"
	local -r -i max_lines_DEFAULT=20
	local -r -i max_lines="${3:-$max_lines_DEFAULT}"

	# consts
	local -r -i last_lines_count=2

	# vars
	local checked_JSON entity_to_print color_option
	local -i entity_bytes entity_lines=0 first_lines_count skipped_lines_count
	local -a lines_array

	# code

	# color check
	if [[ -z "${FARM_HASH-}" ]]; then
		color_option='--color-output'
	else
		# turn the colors off if called from cgi-bin script
		color_option='--monochrome-output'
	fi

	# type check
	if [[ -z "$expected_JSON" ]]; then
		entity_type='empty'
		entity_to_print=''
	elif checked_JSON="$( jq --compact-output "$color_option" '.' <<< "$expected_JSON" 2> /dev/null )"; then
		entity_type='JSON'
		entity_to_print="$checked_JSON"
	else
		entity_type='string'
		entity_to_print="$expected_JSON"
	fi

	# size check
	entity_bytes="${#entity_to_print}"

	if (( entity_bytes )); then
		readarray -tn 0 lines_array <<< "$entity_to_print"
		entity_lines="${#lines_array[@]}"
	fi

	if (( entity_lines > 1 )); then
		echo -en "${LGRAY}${script_basename}:${NOCOLOR} $header ($entity_type, $entity_bytes bytes, $entity_lines lines)"
	else
		echo -en "${LGRAY}${script_basename}:${NOCOLOR} $header ($entity_type, $entity_bytes bytes)"
	fi

	if (( entity_bytes )); then
		echo ':'
		if (( entity_lines <= max_lines )); then
			# print all lines
			echo "$entity_to_print" # 'echo -e' renders all '\n' words in the server's response to newlines -- unwanted
		else
			# print a few first lines + skip message + last $last_lines_count lines
			# TODO limits checking, like "show me only 3 lines while last_lines_count=2"
			((
				first_lines_count = max_lines - 1 - last_lines_count,
				skipped_lines_count = entity_lines - ( first_lines_count + last_lines_count )
			))
			printf '%b\n' "${lines_array[@]: 0:$first_lines_count}"
			printf '...skipped %u lines...\n' "$skipped_lines_count"
			printf '%b\n' "${lines_array[@]: -$last_lines_count}"
		fi
	else
		echo
	fi
}

function get_ip_as_json {
	# consts
	local -r ip_RE='inet addr:([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'

	# vars
	local ip_address ip_address_as_json

	# flags
	local -i is_ip_exist_FLAG=0

	# code
	if [[ "$ASIC_MODEL" == 'Toddminer C1'* ]]; then
		ip_address="$( ifconfig eth0 | grep 'inet ' | awk '{ print $2 }' )"
	else
		#ip_address="$( LANG=C ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1 }' )"
		ip_address="$( LANG=C ifconfig eth0 | rematch "$ip_RE" )"
	fi

	if [[ -n "$ip_address" ]]; then
		is_ip_exist_FLAG=1
		ip_address_as_json="[\"${ip_address}\"]"
	else
		ip_address_as_json='null'
	fi

	echo "$ip_address_as_json"

	(( is_ip_exist_FLAG )) # set exitcode
}

function get_asic_json {
	# vars
	local asic_json

	# code
	[[ -s /usr/bin/compile_time && ! -s /usr/bin/compile_ver ]] &&
		asic_json="$(		jq_raw_input_then_slurp /usr/bin/compile_time	'{"firmware": .[0], "model": .[1], "logic_version": .[2]}'						)"
	[[ -s /usr/bin/compile_ver ]] &&
		asic_json="$(		jq_raw_input_then_slurp /usr/bin/compile_ver	'{"firmware": .[0], "model": .[1], "logic_version": .[2]}'						)"

	case "$ASIC_MODEL" in
		'Antminer D3 Blissz'*	)
			asic_json="$(	jq_raw_input_then_slurp /usr/bin/compile_time	'{"firmware": .[0], "model": .[1], "logic_version": "unknown"}'					)";;
		'b29+.g19'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon A9", "logic_version": .[0]}'			)";;
		'a9+.g19'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon A9+", "logic_version": .[0]}'			)";;
		'd9.g19'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon D9", "logic_version": .[0]}'			)";;
		's11.g19'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon S11", "logic_version": .[0]}'			)";;
		't3.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T3", "logic_version": .[0]}'			)";;
		't3+.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T3+", "logic_version": .[0]}'			)";;
		't2thm.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2Thm", "logic_version": .[0]}'		)";;
		't2thf.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2Th", "logic_version": .[0]}'		)";;
		't2th.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2Thf", "logic_version": .[0]}'		)";;
		't2tz.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2Tz-30T", "logic_version": .[0]}'	)";;
		't2th+.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2TH+", "logic_version": .[0]}'		)";;
		't2t.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2T-24T", "logic_version": .[0]}'		)";;
		't2thf.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2THf+", "logic_version": .[0]}'		)";;
		't2t+.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2T+(32T)", "logic_version": .[0]}'	)";; #'# syntax highlighting fix
		't2thl+.soc'			)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2THl+", "logic_version": .[0]}'		)";;
		't2ts.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2Ts-26T", "logic_version": .[0]}'	)";;
		't2ti.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T2Ti-25T", "logic_version": .[0]}'	)";;
		't3h+.soc'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "Innosilicon T3H+", "logic_version": .[0]}'		)";;
		't1.g19'				)
			asic_json="$(	jq_raw_input_then_slurp /etc/hwrevision			'{"firmware": .[1], "model": "DragonMint T1", "logic_version": .[0]}'		)";;
		'Zig Z1+'				)
			asic_json="$(	jq_raw_input_then_slurp /var/www/html/VERSION	'{"firmware": .[0], "model": "Zig Z1+", "logic_version": "Zig Z1+"}'			)";;
		'Zig Z1'				)
			asic_json="$(	jq_raw_input_then_slurp /var/www/html/VERSION	'{"firmware": .[0], "model": "Zig Z1", "logic_version": "Zig Z1"}'				)";;
		'T4.G19'				)
			asic_json="$(	jq_raw_input_then_slurp /tmp/type				'{"firmware": .[0], "model": "Innosilicon A5/A8", "logic_version": .[0]}'		)";;
		'Toddminer C1'			)
			asic_json="$( /home/sm/miner/build/cpuminer -V | head -n 1 | awk '{ print $3}' |
							jq_raw_input_then_slurp -						'{"firmware": .[0], "model": "Toddminer C1", "logic_version": .[0]}'			)";;
		'Toddminer C1 PRO'		)
			asic_json="$( /home/sm/miner/build/cpuminer -V | head -n 1 | awk '{ print $4}' |
							jq_raw_input_then_slurp -						'{"firmware": .[0], "model": "Toddminer C1 PRO", "logic_version": .[0]}'		)";;
	esac

	echo "$asic_json"
}

function get_uid {
	# excerpt from GPU hello, for the reference:
	#uid=$(echo ${system_uuid}-${cpu_id}-${first_mac} | tr '[:upper:]' '[:lower:]' | sha1sum | awk '{print $1}')

	# arrays
	local -a uid

	# vars
	local eth0_mac digest_program

	# code
	eth0_mac="$( < /sys/class/net/eth0/address )"
	uid="${mb_product}-${eth0_mac}"
	uid="${uid//:}" # trim all ':'
	uid="${uid,,}" # tolower()
	for digest_program in sha1sum md5sum; do
		if hash "$digest_program" 2> /dev/null; then
			uid=( $( "$digest_program" <<< "$uid" ) )
			break
		fi
	done
	# shellcheck disable=SC2128
	# "Expanding an array without an index only gives the first element." -- yes, sure, let's use this useful side effect
	echo "$uid"
}

function get_hive_client_version {
	# consts
	local -r file='/hive/etc/VERSION'

	# vars
	local version

	# code
	if [[ -s "$file" ]]; then
		version="$( < "$file" )"
	else
		echo_debug "$file not found or empty"
		return 1
	fi

	echo "$version"
}

function get_hive_client_build_version {
	# consts
	local -r file='/hive/etc/build'

	# vars
	local version

	# code
	if [[ -s "$file" ]]; then
		version="$( < "$file" )"
	else
		echo_debug "$file not found or empty"
		return 1
	fi

	echo "$version"
}

function get_kernel_version {
	# global vars
	local -g hive_client_version

	# vars
	local kernel_version
	local hive_client_version hive_client_build_version

	# code
	kernel_version="$( uname --kernel-release )"

	# add Hive Client's version & build to kernel info
	hive_client_version="$( get_hive_client_version )"
	hive_client_build_version="$( get_hive_client_build_version )"

	# add a client release/build version
	if [[ -n "$hive_client_version" && -n "$hive_client_build_version" ]]; then
		kernel_version+=" ($hive_client_version-$hive_client_build_version)"
	elif [[ -n "$hive_client_version" && -z "$hive_client_build_version" ]]; then
		kernel_version+=" ($hive_client_version)"
	else
		kernel_version+=' (???)'
	fi

	# add signed status to a kernel info
	if [[ "$ASIC_MODEL" == 'Antminer'* ]]; then
		if ant-functions.sh is_hiveon_fw_signed; then
			kernel_version+=' signed'
		else
			kernel_version+=' unsigned'
		fi
	fi

	echo "$kernel_version"
}

function serve_hiveon_model_cache {
	# Hiveon only: model cache

	# consts
	local -r antminer_compile_FILE='/usr/bin/compile_time'
	local -r hiveon_compile_FILE='/usr/bin/compile_ver'
	local -r hiveon_model_saved_FILE='/hive-config/model'
	local -r compile_ver_blacklist_RE='(TEST|Antminer X17|[Uu]nknown)'

	# vars
	local hiveon_model_detected='' hiveon_model_saved=''
	local this_compile_file this_compile_file_2nd_line new_2nd_line

	# code
	echo_action 'Processing Hiveon model cache'
	# try to get ASIC model from miner's log (Series 17)
	if [[ -f "$hiveon_compile_FILE" && -s /var/log/log ]]; then
		#hiveon_model_detected="$( grep -Fm1 -e 'Project type:' /var/log/log | awk -F': ' '{print $NF}' )" # old method

		# search for 2 patterns
		# old one: 2020-10-02 04:48:01 driver/driver-btm-api.c:1450:bitmain_board_init: Project type: Antminer T17+
		# new one: 2020-09-25 12:54:24 driver/driver-btm-api.c:2257:bitmain_soc_init: Miner compile time: Fri Sep 25 11:25:18 UTC 2020 type: Antminer S17 Hiveon
		hiveon_model_detected="$( awk -F ' type: ' '/Project type: |Miner compile time:.+type: /{ print $NF; exit }' < /var/log/log )"
		[[ -n "$hiveon_model_detected" ]] && echo_info "Model found in /var/log/log: '$hiveon_model_detected'"
	fi

	# remove saved model file if it contains 'TEST'
	# shellcheck disable=SC2076
	if [[ -s "$hiveon_compile_FILE" && "$( < "$hiveon_compile_FILE" )" =~ 'TEST' ]]; then
		[[ -f "$hiveon_model_saved_FILE" ]] && rm "$hiveon_model_saved_FILE"
		hiveon_model_detected=''
	fi

	# remove saved model file if it contains blacklisted words
	if [[ -s "$hiveon_model_saved_FILE" && "$( < "$hiveon_model_saved_FILE" )" =~ $compile_ver_blacklist_RE ]]; then
		echo_warning "Model cache contains blacklisted words: '$( < "$hiveon_model_saved_FILE" )'. Cache cleared"
		rm "$hiveon_model_saved_FILE"
	fi

	if [[ -n "$hiveon_model_detected" ]]; then
		if [[ "$hiveon_model_detected" =~ $compile_ver_blacklist_RE ]]; then
			# only warn user
			echo_info "Detected model contains blacklisted words: '$hiveon_model_detected', skipped"
			message warning "ASIC model detected: $hiveon_model_detected" --silent
			hiveon_model_detected=''
		else
			if [[ -s "$hiveon_model_saved_FILE" ]]; then
				# if model is saved -- get a saved model
				hiveon_model_saved="$( < "$hiveon_model_saved_FILE" )"
				echo_info "Got model from cache: '$hiveon_model_saved'"
			else
				hiveon_model_saved=''
				echo_warning "Model cache empty or not found"
			fi
			if [[ "$hiveon_model_saved" != "$hiveon_model_detected" ]]; then
				# if detected model is different -- save detected model to file
				message info "ASIC model re-detected: $hiveon_model_detected" --silent
				echo_action "Saving detected model '$hiveon_model_detected' to the model cache"
				echo "$hiveon_model_detected" > "$hiveon_model_saved_FILE"
			fi
		fi
	fi

	[[ -s "$hiveon_model_saved_FILE" ]] && hiveon_model_detected="$( < "$hiveon_model_saved_FILE" )"

	if [[ -n "$hiveon_model_detected" && -s "$hiveon_compile_FILE" ]]; then
		for this_compile_file in "$hiveon_compile_FILE" "$antminer_compile_FILE"; do
			this_compile_file_2nd_line="$( sed -n '2p' "$this_compile_file" )"
			if [[ "$this_compile_file_2nd_line" != "$hiveon_model_detected" ]]; then
				# add 'Hiveon' to compile_* files
				new_2nd_line="$hiveon_model_detected Hiveon"
				echo_action "Processing $this_compile_file: '$this_compile_file_2nd_line' -> '$new_2nd_line'"
				sed "2s|.*|$new_2nd_line|" -i "$this_compile_file"
			fi
		done
	fi
}

function send_hello_packet {
	# try to send the hello packet (10 times max, every next pause will be longer and longer)

	# args
	local -r server_URL="$1"
	local -r -n server_request_by_ref="$2"
	local -r -n server_response_by_ref="$3"

	# consts
	local -r -i curl_initial_connect_timeout=5
	local -r -i max_connection_attempts=10
	local -r test_URL="$server_URL/worker/api?a=b"
	local -r work_URL="$server_URL/worker/api?id_rig=${RIG_ID-}&method=hello"

	# vars
	local -i attempts_counter curl_connect_timeout curl_max_time curl_exitcode
	local server_response_sanity_check

	# code
	print_JSON_with_header "Sending request to $server_URL" "$server_request_by_ref"

	for (( attempts_counter = 1; attempts_counter <= max_connection_attempts; attempts_counter++ )); do
		(( curl_connect_timeout = curl_initial_connect_timeout + attempts_counter ))
		(( curl_max_time = curl_connect_timeout * 2 + 1 ))
		# server sanity check first
		(( script_DEBUG )) && echo_debug "Proceeding a sanity check for '$test_URL'..."
		server_response_sanity_check="$(
			curl \
				--silent --connect-timeout "$curl_connect_timeout" --max-time "$curl_max_time" \
				"$test_URL"
		)"
		curl_exitcode=$?

		if (( ! curl_exitcode )); then
			(( script_DEBUG )) && echo_debug 'Server connected [OK]'
			if [[ -n "$server_response_sanity_check" ]]; then
				(( script_DEBUG )) && echo_debug 'Server response is not empty [OK]'
				if jq --exit-status '.error and .error.code' <<< "$server_response_sanity_check" > /dev/null 2>&1; then
					# ^^^^^^^^^^^^^ jq will exit with exitcode 0 only if output is 'true'
					(( script_DEBUG )) && echo_debug 'Server is the Hive API server [OK]'
					(( script_DEBUG )) && echo_debug "Connecting to get a config: '$work_URL'..."
					server_response_by_ref="$(
						curl \
							--insecure --location --data @- --silent \
							--connect-timeout "$curl_connect_timeout" --max-time "$curl_max_time" \
							--request POST "$work_URL" \
							--header "Content-Type: application/json" \
						<<< "$server_request_by_ref"
					)"
					curl_exitcode=$?
					(( ! curl_exitcode )) && break
				else
					echo
					print_JSON_with_header 'Sanity checker received an invalid response' "$server_response_sanity_check"
					echo_error "Server is not a valid Hive API server. No second chances provided for this type of error."
					curl_exitcode=1
					break
				fi
			else
				echo_error "Empty answer from $server_URL. No second chances provided for this type of error."
				curl_exitcode=1
				break
			fi
		fi

		echo_error "$( human-curl-error $(( curl_exitcode )) )"
		[[ -n "$server_response_by_ref" ]] && print_JSON_with_header 'Server response' "$server_response_by_ref"
		echo_error "Connection attempt #$attempts_counter failed, will try again in ${attempts_counter}s..."
		sleep $(( attempts_counter ))
	done

	# show the server response
	echo
	print_JSON_with_header 'Received response' "$server_response_by_ref"
	echo

	return $(( curl_exitcode ))
}

function get_system_boot_time_in_seconds {
	#
	# Usage: get_system_boot_time_in_seconds
	#
	awk '/btime/{print $2}' /proc/stat
}


# consts

declare -r RIG_CONF_default='/hive-config/rig.conf'
declare -r RIG_CONF="${RIG_CONF:-$RIG_CONF_default}" # for ASIC emulator: set to default only if RIG_CONF variable is empty
declare -r WALLET_CONF='/hive-config/wallet.conf'
declare -r HELLO_OK_file='/tmp/.hive-hello-ok'
declare -r FARM_HASH_valid_RE='^[[:xdigit:]]{40}$'


# flags

declare -i arg_boot_FLAG=0				# send boot flag with hello message
declare -i arg_restartminer_FLAG=0		# will need to restart miner after


# vars

declare arg_hostname=''
declare mb_manufacturer mb_product
declare server_request_json server_response_json
declare -i attempts_counter sleep_counter sleep_time sleep_1hr_accumulator


# exports

[[ ! "$PATH" =~ (^|:)/hive/bin:/hive/sbin(:|$) ]] && export PATH="$PATH:/hive/bin:/hive/sbin" # add only if not exist
[[ ! "$LD_LIBRARY_PATH" =~ (^|:)/hive/lib(:|$) ]] && export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}${LD_LIBRARY_PATH:+:}/hive/lib" # save $LD_LIBRARY_PATH:/hive/share/S9/lib for hiveon


# sources

[[ -f "$RIG_CONF" ]] && ! grep -Eq '^FARM_HASH=.+$' "$RIG_CONF" && source colors # duct tape: turn the colors off for cgi-bin script


# main

print_script_version

[[ -f "$HELLO_OK_file" ]] && rm "$HELLO_OK_file"

mkdir -p /hive-config

if [[ -f "$RIG_CONF" ]]; then
	source "$RIG_CONF"
else
	die "Configuration file $RIG_CONF not found" 1
fi

[[ -z "${FARM_HASH-}" && -z "${RIG_ID-}" ]] && die "Please use FARM_HASH or RIG_ID in $RIG_CONF" 1
[[ -n "${RIG_ID-}" && -z "${RIG_PASSWD-}" ]] && die "No RIG_PASSWD in $RIG_CONF" 1
[[ -z "${HIVE_HOST_URL-}" ]] && die "No HIVE_HOST_URL in $RIG_CONF" 1

source asic-model
[[ "$ASIC_MODEL" == 'Toddminer C1'* && ! "$PATH" =~ (^|:)/sbin ]] && export PATH="$PATH:/sbin:/usr/sbin" # add if not exist

parse_arguments "$@"


# wait for network interface (until eth0 is up AND ip address not blank)

until is_interface_up 'eth0' && ip_json="$( get_ip_as_json )"; do
	(( sleep_1hr_accumulator >= 3600 )) && (( sleep_1hr_accumulator = 0, sleep_counter = 0 )) # reset an exponential sleeping once in an hour

	((
		attempts_counter++,
		sleep_counter++,
		sleep_time = sleep_counter ** 2,
		sleep_1hr_accumulator += sleep_time
	))

	# let's cover weird edge cases
	if ping -c 1 -W 1 "$( IFS='/'; hostname=( $HIVE_HOST_URL ); echo "${hostname[2]}" )" &> /dev/null; then
		echo_info 'The network is up'
		break
	fi

	echo_error "eth0 is down or no IP address assigned, yet. Attempt #$attempts_counter (total time $(( sleep_1hr_accumulator / 60 ))m), will try again in ${sleep_time}s..."
	sleep $(( sleep_time ))
done


# collect system information

mb_manufacturer="$ASIC_MANUFACTURER"
mb_product="$ASIC_MODEL"
net_interfaces_json="$( ip -o link | awk '!/LOOPBACK|POINTOPOINT|NOARP/{ printf "{\"iface\": \"%s\", \"mac\": \"%s\"}\n", substr($2, 1, length($2)-1), $(NF-2) }' | jq --slurp --compact-output '.' )"
cpu_model="$( grep -m1 '^model name' /proc/cpuinfo | sed 's/model name[ :\t]*//g' )"
#cpu_hardware=`cat /proc/cpuinfo | grep -m1 "^Hardware" | sed 's/Hardware[ :\t]*//g'
#[[ -n "$cpu_hardware" ]] && cpu_model="$cpu_model ($cpu_hardware)"
cpu_cores="$( grep -c '^model name' /proc/cpuinfo )"
aes="$( grep -c '^Features.*aes' /proc/cpuinfo )"
kernel="$( get_kernel_version )"
hive_client_version="$( get_hive_client_version )"

[[ -n "$HIVEON_VERSION" ]] && serve_hiveon_model_cache

asic_json="$( get_asic_json )"
uid="$( get_uid )"
boot_POSIX_time="$( get_system_boot_time_in_seconds )"


# construct a request

# shellcheck disable=SC2016
server_request_json="$(
	jq \
		--null-input --compact-output \
		--arg uid "$uid" \
		--arg rig_id "${RIG_ID-}" \
		--arg passwd "${RIG_PASSWD-}" \
		--arg boot_time "$boot_POSIX_time" \
		--argjson boot_event "$arg_boot_FLAG" \
		--argjson ip "$ip_json" \
		--argjson net_interfaces "$net_interfaces_json" \
		--arg model "$cpu_model" --arg cores "$cpu_cores" --arg aes "$aes" \
		--arg manufacturer "$mb_manufacturer" --arg product "$mb_product" \
		--argjson asic "$asic_json" \
		--arg asic_chain_count "$ASIC_CHAIN_COUNT" \
		--arg kernel "$kernel" \
		--arg version "$hive_client_version" \
		--arg fans_count "$ASIC_FAN_COUNT" \
		'{
			"method": "hello", "jsonrpc": "2.0", "id": 0,
			"params": {
				$rig_id, $passwd,
				$uid, $boot_time, $boot_event, $ip, $net_interfaces,
				"mb": {$manufacturer, $product},
				"cpu": {$model, $cores, $aes},
				$asic, $asic_chain_count,
				$kernel, $version, $fans_count
			}
		}'
)"


# try to get a worker name from /config/HIVE_WORKER_NAME
if [[ -s /config/HIVE_WORKER_NAME ]]; then
	arg_hostname="$( < /config/HIVE_WORKER_NAME )"
	echo_info "File /config/HIVE_WORKER_NAME found, using its content as a new worker name: $arg_hostname"
	rm /config/HIVE_WORKER_NAME
fi


# add hostname as a worker name to server_request_json
if [[ -n "$arg_hostname" ]]; then
	echo_info "Using '$arg_hostname' as WORKER_NAME"
	# shellcheck disable=SC2016
	server_request_json="$( jq --arg worker_name "$arg_hostname" --compact-output '. * {"params": {$worker_name}}' <<< "$server_request_json" )"
fi


# add FARM_HASH to server_request_json
if [[ -n "${FARM_HASH-}" ]]; then
	if [[ "$FARM_HASH" =~ $FARM_HASH_valid_RE ]]; then
		echo_info "Using FARM_HASH '$FARM_HASH' (${#FARM_HASH} bytes)"
		# shellcheck disable=SC2016
		server_request_json="$( jq --arg farm_hash "$FARM_HASH" --compact-output '. * {"params": {$farm_hash}}' <<< "$server_request_json" )"
	else
		echo_error "Invalid FARM_HASH '$FARM_HASH' (${#FARM_HASH} bytes), will not be used"
	fi
fi


# send the hello packet
# mind the VarByRef function's parameters
send_hello_packet "$HIVE_HOST_URL" 'server_request_json' 'server_response_json' ||
	die "Error connecting to $HIVE_HOST_URL. No attempts left, exiting..." #404 is not a bad exit code


# and then check json received
if server_error="$( jq --raw-output '.error' <<< "$server_response_json" )"; then
	if is_JSON_string_not_empty_or_null "$server_error"; then
		die "Server responded with error '$( jq --raw-output '.error.message' <<< "$server_response_json" )'" 1
	fi
else
	die 'Error while parsing server response as a JSON'
fi


# TODO save and apply asic/asic_oc config
#
# issue: duplicate code
#
# solution: we could decouple command-processing module from the agent and make it a separate entity
# that can execute requests from agent aaaand.. hello!


# Save config and check it ================================================================
received_config="$( jq --raw-output '.result.config' <<< "$server_response_json" )"
if is_JSON_string_empty_or_null "$received_config"; then
	die 'No "config" field in server response' 1
fi
# shellcheck disable=SC2015
echo "$received_config" > "$RIG_CONF" && echo_ok 'Received config saved' || echo_error 'Received config NOT saved'
# re-read rig.conf
source "$RIG_CONF"
#hostname-check


# Timezone ================================================================
if [[ -n "${TIMEZONE-}" ]]; then
	if hash 'timedatectl' 2> /dev/null; then
		timedatectl set-timezone "$TIMEZONE"
	else
		export TZ="$TIMEZONE"
	fi
fi


# Wallet config ================================================================
received_wallet="$( jq --raw-output '.result.wallet' <<< "$server_response_json" )"
if is_JSON_string_not_empty_or_null "$received_wallet"; then
	# shellcheck disable=SC2015
	echo "$received_wallet" > "$WALLET_CONF" && echo_ok 'Received wallet saved' || echo_error 'Received wallet NOT saved'
fi


# Post actions =================================================================
# restartminer - restart miner on success
if (( arg_restartminer_FLAG )); then
	echo_action 'Restarting miner'
	/hive/bin/miner restart
fi

echo_ok 'All is done'
touch "$HELLO_OK_file"

# flush buffers if any files changed
sync

exit 0
