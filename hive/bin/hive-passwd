#!/usr/bin/env bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.3.7
#


readonly script_mission='Client for ASICs: Password management for ssh and Antminer web interface'
readonly script_version='0.2.1'
readonly script_basename="$( basename "$0" )"


# !!! bash strict mode, no unbound variables

set -o nounset


# functions

function print_script_version {
	echo "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function print_script_usage {
	echo "Usage: ${CYAN-}${script_basename} [new_password] [OPTIONS]${NOCOLOR-}"
	echo
	echo "  ${WHITE-}-c, --conf${GRAY-}      set ssh password as a worker password (RIG_PASSWD)${NOCOLOR-}"
	echo "  ${WHITE-}-d, --default${GRAY-}   set ssh password to 'admin', web password to 'root'${NOCOLOR-}"
	echo "  ${WHITE-}-s, --show${GRAY-}      show current web and ssh passwords${NOCOLOR-}"
	echo "  ${WHITE-}-w, --web${GRAY-}       set password for the web interface (default is ssh password)${NOCOLOR-}"
	echo
}

function md5 {
	#
	# Usage: md5 'string' 
	#

	# args

	(( $# == 1 )) || return 1
	local -r string="$1"

	# vars

	local md5_output

	# code

	md5_output="$( printf '%s' "${string}" | md5sum )"
	echo "${md5_output::32}"
}

function get_worker_password {
	#
	# Usage: get_worker_password
	#

	# consts

	local -r RIG_CONF='/hive-config/rig.conf'

	# code

	if [[ -s "$RIG_CONF" ]] && source "$RIG_CONF" && [[ -n "${RIG_PASSWD-}" ]]; then
		echo "$RIG_PASSWD"
	else
		false
	fi
}

function set_antminer_web_password {
	#
	# Usage: set_antminer_web_password 'new_password'
	#
	# var names are from RFC 2069

	# args

	(( $# == 1 )) || return 1
	local -r new_password="$1"

	# consts

	local -r username_value='root'
	local -r realm_value='antMiner Configuration'

	# vars

	local new_password_HA1 new_password_digest_string

	# code

	echo -n "Setting Antminer web interface password to '${WHITE-}${new_password}${NOCOLOR-}'... "

	if [[ ! -s "$lighttpd_password_file" ]]; then
		echo "${BRED-}FAILED${NOCOLOR-} ($lighttpd_password_file not found or empty)"
		echo
		return 1
	fi

	new_password_HA1="$( md5 "${username_value}:${realm_value}:${new_password}" )"
	new_password_digest_string="${username_value}:${realm_value}:${new_password_HA1}"

	# compare current password with the new
	if diff "$lighttpd_password_file" <( echo "$new_password_digest_string" ) > /dev/null; then
		echo "${BYELLOW-}SKIPPED${NOCOLOR-} (new password is the same as the current one, skipped)"
		return 2
	fi

	# create new lighttpd-htdigest.user file
	if echo "$new_password_digest_string" > "$lighttpd_password_file"; then
		echo "${GREEN-}OK${NOCOLOR-}"
		return 0
	else
		echo "${BRED-}FAILED${NOCOLOR-} (something bad happened)"
		return 1
	fi
}

function show_ssh_password {
	#
	# Usage: show_ssh_password
	#

	# consts

	# shellcheck disable=SC2016
	local -r admin_string='root:$6$saaYvC9T$PqLC9JWHDZsWYmpB0b0Zf.34b1m5/r9U6A8PPig2qzxAyUN78pyI/vi7OZrCA0T2y1fT5UNFtPiBYuCyBTA610:15975:0:99999:7:::'
	# shellcheck disable=SC2016
	local -r  root_string='root:$6$K/vQNJUn$ikrUf5YdPElcX5Sp2AUOrOfLVtLdMBp/zYFy1GCQpeOmS2ZcJQ8i5g3XKmf3rigb1sL.9dUxlfXqMdc/j.TBa1:18071:0:99999:7:::'

	# vars

	local -i is_1st_and_2nd_equal=0 is_1st_and_3rd_equal=0
	local shadow_files_collection

	# code

	cmp -s /etc/shadow /etc/shadow.factory && is_1st_and_2nd_equal=1
	cmp -s /etc/shadow /config/shadow && is_1st_and_3rd_equal=1

	if (( is_1st_and_2nd_equal && is_1st_and_3rd_equal )); then
		shadow_files_collection='/etc/shadow'
	else
		shadow_files_collection='/etc/shadow /etc/shadow.factory /config/shadow'
	fi

	for this_file in $shadow_files_collection; do
		echo -n "ssh password in $this_file: "
		if grep -Fqse "$admin_string" -- "$this_file"; then
			echo -n "${BRED-}admin${GRAY-} (default, all viruses know it)${NOCOLOR-}"
		elif grep -Fqse "$root_string" -- "$this_file"; then
			echo -n "${BRED-}root${GRAY-} (standard, all viruses know it)${NOCOLOR-}"
		else
			echo -n "${BGREEN-}non-standard${GRAY-} (and it's good)${NOCOLOR-}"
		fi
		echo
	done
}

function show_antminer_web_password {
	#
	# Usage: show_antminer_web_password
	#

	# consts

	local -r default_htdigest_content='root:antMiner Configuration:23c2a2d78c0d20ec069097d7d20c4392'

	# code

	echo -n 'Antminer web password: '
	if grep -Fqse "$default_htdigest_content" -- "$lighttpd_password_file"; then
		echo -n "${BRED}root${GRAY-} (default, all viruses know it)${NOCOLOR-}"
	else
		echo -n "${BGREEN}non-standard${GRAY-} (and it's good)${NOCOLOR-}"
	fi
	echo
}

function set_ssh_password {
	#
	# Usage: set_ssh_password 'new_password'
	#

	# args

	(( $# == 1 )) || return 1
	local -r new_password="$1"

	# code

	echo -n "Setting ssh password to '$new_password'... "

	if printf '%s\n%s\n' "$new_password" "$new_password" | passwd root > /dev/null; then
		rm -f /config/shadow
		mv /etc/shadow /config/shadow
		ln -s /config/shadow /etc/shadow
		echo "${GREEN-}OK${NOCOLOR-}"
		echo
	else
		echo "${BRED-}FAILED${NOCOLOR-} (something bad happened)"
		echo
		return 1
	fi
}

function parse_arguments {
	#
	# Usage: parse_arguments "$@"
	#

	# args

	new_ssh_password="${1-}"

	# vars

	local this_ARG RIG_PASSWD

	# code

	if 	[[ -z "$new_ssh_password" ]]; then
		print_script_usage
		exit 0
	fi

	for this_ARG in "$@"; do
		case "$this_ARG" in
			'-c' | '--conf')
				echo 'rig.conf ON: set ssh password as a worker password (RIG_PASSWD)'
				if RIG_PASSWD="$( get_worker_password )"; then
					new_ssh_password="$RIG_PASSWD"
				else
					echo "Cannot get RIG_PASSWD from $RIG_CONF"
					exit 1
				fi
				;;
			'-d' | '--default')
				echo "defaults ON: set ssh password to default 'admin', web password to default 'root'"
				new_ssh_password='admin'
				new_web_password='root'
				;;
			'-s' | '--show')
				show_antminer_web_password
				show_ssh_password
				echo "RIG_PASSWD: $( get_worker_password )"
				exit 0
				;;
			'-w'|'--web')
				new_web_password="$new_ssh_password"
				new_ssh_password=''
				;;
			'-h'|'--help')
				print_script_usage
				exit 0
				;;
		esac
	done
}


# global sources

[ -s /hive/bin/colors ] && source /hive/bin/colors
source asic-model || echo 'ERROR: /hive/bin/asic-model not found'


# global consts

declare -r lighttpd_password_file='/config/lighttpd-htdigest.user'


# global vars

declare new_ssh_password='' new_web_password=''


# main

print_script_version
parse_arguments "$@"

[[ -n "$new_ssh_password" ]] && set_ssh_password "$new_ssh_password"

if [[ -n "$new_web_password" && "$ASIC_MANIUFACTURER" == 'Bitmain' ]]; then
	set_antminer_web_password "$new_web_password"
else
	echo "Antminer not detected (model: $ASIC_MODEL), cannot set web password${NOCOLOR-}"
	exit 1
fi
