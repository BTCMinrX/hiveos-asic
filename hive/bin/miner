#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE
#


readonly script_mission='Client for ASICs: Miner controller'
readonly script_version='1.0.1'
readonly script_basename="$( basename "$0" )"
source /hive/bin/hive-functions.sh


# functions

function script_usage {
	echo -e "Usage: ${CYAN}$script_basename [start|stop|restart|config|config-gen]${NOCOLOR}"
	echo -e "       ${CYAN}$script_basename log [kernel|status|tuning|watchdog|all]${NOCOLOR} - display a corresponding log"
	echo -e "       ${CYAN}$script_basename tuning${NOCOLOR}                                  - deprecated, please do not use"
	echo
	echo -e "If you run ${CYAN}$script_basename${NOCOLOR} without parameters miner screen will be tried to resume."
}

# config functions

function config-gen {
	/hive/bin/asicminer-config
}

function echo_config_file {
	echo -e "${YELLOW}=== $1 =================================================${NOCOLOR}"
	cat "$1"
	echo
}

function config {
	# shows miner config
	logname=""
	if [[ ! -z $CONFIG_PATH ]]; then
		echo_config_file "${CONFIG_PATH}"
	else
		echo "Unknown model $ASIC_MODEL"
		return
	fi
}

# start/stop/restart functions

function start {
	echo -e "Starting ${CYAN}$THIS_MINER_NAME${NOCOLOR}"
	if [[ -e "/sbin/watchdog_restart.pl" ]]; then
		config-gen
		rm -f /tmp/norespawn
	elif [ -e "/www/pages/cgi-bin/resume_miner.cgi" ]; then
		config-gen
		sh /www/pages/cgi-bin/resume_miner.cgi
	elif [[ $ASIC_MODEL =~ "Toddminer C1" ]]; then
		config-gen
		/hive/bin/todd_api mstart
#		/home/sm/miner/build/miner.sh &
	else
		for i in {1..15}; do
			test_miner="$(ps | grep -e bmminer -e cgminer -e single-board-test | grep -v 'grep' | grep -v 'systemctl')"
			if [[ -z $test_miner ]] ; then
				config-gen
				screen -d > /dev/null
				if [[ $ASIC_MODEL =~ ".g19" || $ASIC_MODEL == "t3.soc" ]]; then
					systemctl start cgminer.service
				elif [[ $ASIC_MODEL == "t3h+.soc" || $ASIC_MODEL == "t3+.soc" || $ASIC_MODEL == "t2th+.soc" || $ASIC_MODEL == "t2thf+.soc" || $ASIC_MODEL == "t2thl+.soc" || $ASIC_MODEL == "t2th.soc" || $ASIC_MODEL == "t2tz.soc" || $ASIC_MODEL == "t2thm.soc" || $ASIC_MODEL == "t2thf.soc" || $ASIC_MODEL == "t2t+.soc" || $ASIC_MODEL == "t2ts.soc" || $ASIC_MODEL == "t2ti.soc" || $ASIC_MODEL == "t2t.soc" ]]; then
					systemctl start cgminer.service
					#timeout -t 600 /hive/bin/inno_api updatePools
					timeout -t 600 /hive/bin/inno_api updateFanspeed
					timeout -t 600 /hive/bin/inno_api setAutoTune
				elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
					break
				elif [[ $ASIC_MODEL == "T4.G19" ]]; then
					python3.4 /home/inno_tools/start_miner.py &
				else
					nohup /etc/init.d/$THIS_MINER_NAME.sh start > /dev/null 2>&1 &
				fi
				break
			fi
			sleep 1
		done
	fi
	echo
}

function stop {
	echo -e "Stopping ${CYAN}$MINER${NOCOLOR}"
	if [[ -e "/sbin/watchdog_restart.pl" ]]; then
		echo "ok" > /tmp/norespawn
	elif [[ -e "/www/pages/cgi-bin/stop_miner.cgi" ]]; then
		sh /www/pages/cgi-bin/stop_miner.cgi
	else
		if [[ $ASIC_MODEL =~ ".g19" || $ASIC_MODEL == "t3.soc" || $ASIC_MODEL == "t3h+.soc" || $ASIC_MODEL == "t3+.soc" || $ASIC_MODEL == "t2th+.soc" || $ASIC_MODEL == "t2thf+.soc" || $ASIC_MODEL == "t2thl+.soc" || $ASIC_MODEL == "t2th.soc" || $ASIC_MODEL == "t2tz.soc" || $ASIC_MODEL == "t2thm.soc" || $ASIC_MODEL == "t2thf.soc" || $ASIC_MODEL == "t2t+.soc" || $ASIC_MODEL == "t2ts.soc" || $ASIC_MODEL == "t2ti.soc" || $ASIC_MODEL == "t2t.soc" ]]; then
			systemctl stop cgminer.service
		elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
			pidof miner | xargs kill -9
		elif [[ $ASIC_MODEL == "T4.G19" ]]; then
			killall innominer_T4
		elif [[ $ASIC_MODEL =~ "Toddminer C1" ]]; then
			/hive/bin/todd_api mstop
		else
			/etc/init.d/$THIS_MINER_NAME.sh stop
		fi
	fi
}

function restart {
	echo -e "${YELLOW}Restarting miner${NOCOLOR}" #can be different on miner change
	if [[ -e "/sbin/watchdog_restart.pl" ]]; then
		config-gen
		rm -f /tmp/norespawn
		echo "ok" > /config/restart
	elif [ -e "/www/pages/cgi-bin/resume_miner.cgi" ]; then
		config-gen
		sh /www/pages/cgi-bin/resume_miner.cgi
	elif [ -e "/www/pages/cgi-bin/restart_miner.cgi" ]; then
		config-gen
		sh /www/pages/cgi-bin/restart_miner.cgi
	elif [[ $ASIC_MODEL =~ "Toddminer C1" ]]; then
		start
	else
		stop
		start
	fi
}

function check_second_miner {
	# sets MINER to MINER2 if requested
	[[ -z $1 || $1 != "2" ]] && return #not a second miner request

	[[ $1 == "2" && -z $MINER2 ]] &&
	echo "No second miner configured" &&
	exit 1

	MINER="$MINER2" #substitute MINER var with second miner
}

# logs functions

function miner_log_basename {
	local miner="$1"
	[[ -z $miner ]] && echo "No miner given to miner_log_basename" && return 1

	if [[ ! -z $LOG_PATH ]]; then
		log_basename="${LOG_PATH}"
	else
		log_basename=""
		echo "Unknown asic $ASIC_MODEL to miner_log_basename"
		return 1
	fi

	echo "$log_basename"
	return 0
}

function log_tail { # TODO should refactor to smth like print_log()
	local TAIL_LINE=80
	if [[ ! -z $HIVEON_VER ]]; then
		sh /www/pages/cgi-bin/get_kernel_log.cgi | tail -n "$TAIL_LINE"
	else
		log_basename=`miner_log_basename $MINER`
		if [[ $ASIC_MODEL =~ ".g19" ]]; then
			journalctl -n "$TAIL_LINE"
		elif [[ $ASIC_MODEL =~ "Toddminer C1" ]]; then
			/hive/bin/todd_api mlog
		else
			#logname="${log_basename}.log"
			logname="${log_basename}"

			if [[ ! -e "$logname" ]]; then
				echo "Log $logname does not exist yet"
				return
			fi

			if [[ `ls -l $logname | awk '{print $5}'` -le 1 ]]; then #can be 1, empty line
				echo "Log $logname is empty"
				return
			fi


			echo -e "${YELLOW}=== $logname last $TAIL_LINE lines =================================================${NOCOLOR}"
			echo "Last modified `stat -c %y $logname`"
			echo
			#tail -n $TAIL_LINE $logname | sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" #sed removes colors
			tail -n "$TAIL_LINE" "$1" "$logname"
		fi
	fi
}

function tail_any_log {
	#
	# tail_any_log [-d] [-r PATTERN] [-s] [-t LINES] ['input_file']
	#
	# -d decorations (header & footer) off
	# -r extended regex pattern
	# -s sort
	# -t tail lines

	# defaults

	local -r -i	is_decoration_DEFAULT=1
	local -r -i	is_from_file_DEFAULT=1
	local -r -i	is_regex_DEFAULT=0
	local -r -i	is_sort_DEFAULT=0
	local -r -i	is_tail_DEFAULT=0

	# options

	local -i	is_decoration="$is_decoration_DEFAULT"
	local -i	is_from_file="$is_from_file_DEFAULT"
	local -i	is_regex="$is_regex_DEFAULT"
	local -i	is_sort="$is_sort_DEFAULT"
	local -i	is_tail="$is_tail_DEFAULT"
	local -i	tail_lines=
	local		regex_pattern=

	# vars

	local -i now last_modified_time_in_seconds file_size
	local option input_file last_modified_time_human_readable last_modified_time_dhms

	# arguments parsing

	while getopts ':dr:st:' option; do
		case "$option" in
			d)	is_decoration=0				;;
			r)	is_regex=1
				regex_pattern="$OPTARG"		;;
			s)	is_sort=1					;;
			t)	is_tail=1
				tail_lines="$OPTARG"		;;
		esac
	done
	shift $(( OPTIND - 1 ))
	local -r input_file="${1-}"

	# code

	if [[ -z "$input_file" || "$input_file" == '-' ]]; then
		is_from_file=0
	fi

	if (( is_from_file )); then
		if [[ -r "$input_file" ]]; then
			file_size="$( get_file_size_in_bytes "$input_file" )"
			if (( is_decoration )); then
				last_modified_time_in_seconds="$( get_file_last_modified_time_in_seconds "$input_file" )"
				now="$( get_current_system_time_in_seconds )"
				(( timespan_between_now_and_last_modified = now - last_modified_time_in_seconds ))
				last_modified_time_dhms="$( format_date_in_seconds "$timespan_between_now_and_last_modified" 'dhms' )"
				last_modified_time_human_readable="$( format_date_in_seconds "$last_modified_time_in_seconds" )"
	
				header="File ${WHITE}$input_file${NOCOLOR}"
				(( is_tail )) && header+=", last ${WHITE}${tail_lines}${NOCOLOR} lines"
				(( is_regex )) && header+=", filtered by '${WHITE}$regex_pattern${NOCOLOR}'"
	
				echo -e "${header}:"
				echo
			fi
	
			if (( file_size <= 1 )); then
				echo "$input_file is empty"
			fi
		else
			echo "$input_file not found or not readable"
			return $(( exitcode_ERROR_NOT_FOUND ))
		fi
	fi

	# tremble before awesome 4-stage conditional pipe!
	iif_pipe "$is_from_file" cat "$input_file" |
		iif_pipe "$is_regex" grep -E -e "$regex_pattern" |
			iif_pipe "$is_sort" sort -us |
				iif_pipe "$is_tail" tail -n "$tail_lines"

	if (( is_from_file )); then
		if (( is_decoration )); then
			echo
			echo -e "${WHITE}$last_modified_time_human_readable${NOCOLOR} file was last modified ${WHITE}$last_modified_time_dhms${NOCOLOR} ago"
		fi
	fi
}

function print_kernel_log {
	local -a uptime_line
	local -i now cputime timestamp
	local line

	if cputime="$( get_system_uptime_in_seconds )"; then
		now="$( get_current_system_time_in_seconds )"
		dmesg | while IFS= read -r -t 0.1 line; do
			if [[ $line =~ ^\[\ *([0-9]+)\.[0-9]+\]\ (.*) ]]; then
				timestamp=$(( now - cputime + BASH_REMATCH[1] ))
				printf '%(%F %T)T %s\n' "$timestamp" "${BASH_REMATCH[2]}"
			else
				echo "$line"
			fi
		done
	else
		dmesg
	fi
}

function print_tune_log {
	local -r tune_log_file='/tmp/tune_log.txt'
	local tune_log_script

	if [[ -s "$tune_log_file" ]]; then
		tail_any_log -t 80 "$tune_log_file"
	else
		for tune_log_script in '/www/pages/cgi-bin/get_auto_tune_log.cgi' '/www/pages/cgi-bin/get_tune_log.cgi'; do
			if [[ -s "$tune_log_script" ]]; then
				sh "$tune_log_script"
			fi
		done
	fi
}

function tail_miner_status_log {
	local -r miner_status_log_file='/nvdata/miner_status.log'
	tail_any_log -t 80 "$miner_status_log_file"
}

function tail_watchdog_log {
	local -r watchdog_log_file='/config/watchdog.log'
	tail_any_log -t 80 "$watchdog_log_file"
}

function collate_all_logs {
	{	# !!! temporary
		print_kernel_log | tail -n 100
		print_tune_log | tail -n 100
		tail -n 100 /nvdata/miner_status.log
		tail -n 100 /config/watchdog.log
	} |
		tail_any_log -t 100 -s -r '^[0-9]'
}


# main()

MINER_LOGS_BASE_DIR='/var/log/miner'
#ASIC_MODEL=`sed -n 2p /usr/bin/compile_time`
MINER='asicminer'

. colors
. asic-model

RIG_CONF="/hive-config/rig.conf"
WALLET_CONF="/hive-config/wallet.conf"


if [[ ! -f $RIG_CONF ]]; then
	echo -e "${RED}Config file $RIG_CONF not found${NOCOLOR}"
	#exit 1
else
	. "$RIG_CONF"
fi

[[ -e $WALLET_CONF ]] && . "$WALLET_CONF"

[[ -z $MINER ]] && MINER="asicminer" && echo -e "${YELLOW}No miner set in config, will use default ${CYAN}\"asicminer\"${NOCOLOR}"

#sgminer-gm is deprecated...
miners_avail=("asicminer")
if ! printf '%s\n' "${miners_avail[@]}" | grep -Eq '^'$MINER'$' ; then
	echo -e "${RED}Please apply Flight Sheet to start mining ${NOCOLOR}"
	message warn "Please apply Flight Sheet to start mining"
	exit 1
fi

case "$1" in
	'config')			config					;;
	'config-gen')		config-gen				;;
	'kernel-log')		print_kernel_log		;;		# deprecated
	'log')
		case "$2" in									# TODO miner log [kernel|tuning|watchdog|all [filter=regex_pattern] [sort=none|date]]
			'all')			collate_all_logs			;;
			'kernel')		print_kernel_log			;;
			'status')		tail_miner_status_log		;;
			'tuning')		print_tune_log				;;
			'watchdog')		tail_watchdog_log			;;
			*)				log_tail $2 $3				;; # supports args for tail. do we still need this???
		esac									;;
	'restart')			restart					;;
	'start')			start					;;
	'stop')				stop					;;
	'tuning')			print_tune_log			;;		# deprecated

	'')
		print_script_version
		screen -x -S bmminer > /dev/null ||
			screen -x -S cgminer /dev/null ||
				echo 'No miner screen running'
		;;

	'-h'|'--help'|*)
		print_script_version
		script_usage
		;;
esac
