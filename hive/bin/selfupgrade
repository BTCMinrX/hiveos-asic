#!/bin/sh


readonly script_mission='Client for ASICs: Update/install Client from repository'
readonly script_version='0.14.11'
readonly script_basename="$( basename "$0" )"


# functions

print_script_version () {
	echo -e "${YELLOW}${script_mission}, version ${script_version}${NOCOLOR}"
	echo
}

print_script_usage () {
	echo -e "Usage examples: ${CYAN}${script_basename}${NOCOLOR}                - update to the latest release version"
	echo -e "                ${CYAN}${script_basename} --force${NOCOLOR}        - force update to the latest release version"
	echo -e "                ${CYAN}${script_basename} 0.1-13${NOCOLOR}         - update to release 0.1-13"
	echo -e "                ${CYAN}${script_basename} 0.1-13 --force${NOCOLOR} - force update to release 0.1-13"
	echo -e "                ${CYAN}${script_basename} master${NOCOLOR}         - force update to the latest stable dev build (beta)"
	echo -e "                ${CYAN}${script_basename} master dev347${NOCOLOR}  - force update to the latest stable dev build (beta), but do nothing if local build is the same as dev347"
	echo -e "                ${CYAN}${script_basename} master github${NOCOLOR}  - force update Antminer Series 15/17 and S9k/S9SE to the latest build from Github (alpha)"
	echo
}

download_url () { #download from github
	echo "$package_file_url"
	echo "> Downloading $package_file_url"
	
	case "$ASIC_MODEL" in
		'Zig Z1+' | 'Zig Z1' | 'Toddminer C1' )
			wget "$package_file_url"
			;;
		*)
			curl -L --insecure -O "$package_file_url"
			;;
	esac

	if [ $? -ne 0 ]; then
		echo "Error downloading $package_file_url"
		exit "$exitcode_NOT_OK"
	fi

	sleep 2
}

install_antminer_bmminer () { # bmminer, / - rw, cron
	download_url
	echo
	echo "> Extracting $package_file_to_download"
	if [ ! -d /config/hive/hive-config ]; then
		mkdir -p /config/hive/hive-config
	fi
	tar -xzv -f "$package_file_to_download"
	[ -L /hive ] && rm /hive
	cp -rf hiveos-asic-${release_version_to_install}/hive /
	[ $? -ne 0 ] && echo "Error extracting $package_file_to_download" && exit "$exitcode_NOT_OK"

	rm "$package_file_to_download"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib
	#[ -d /hive && ! -L /hive ] && mv -f /hive /config/hive/
	[ -d /hive-config ] && [ ! -L /hive-config ] && mv -f /hive-config /config/hive/


	if [ ! -e /hive-config ]; then
		#ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
	fi
	cp -rf /hive/share/S9/S69hive /etc/rcS.d/
	cp -rf /hive/share/S9/.profile /home/root/

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_cgminer () { # cgminer, / - ro, no cron
	download_url
	echo
	echo "> Extracting $package_file_to_download"
	if [ ! -d /config/hive ]; then
		mkdir /config/hive
	fi
	tar -xzv -f "$package_file_to_download"
	cp -rf hiveos-asic-${release_version_to_install}/* /config/hive/
	[ $? -ne 0 ] && echo "Error extracting $package_file_to_download" && exit "$exitcode_NOT_OK"

	rm "$package_file_to_download"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi

	if grep -F '### HIVE AUTORUN ###' /config/network.conf || grep -F 'ln -s /config/hive/hive/ /hive' /config/network.conf || [ -n "$HIVEON_VER" ]; then
		echo '/config/network.conf skip'
	else
		cat >> /config/network.conf <<FILEEOF

### HIVE AUTORUN ###
[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_Z9_cgminer () { # cgminer, / - rw, no cron
	download_url
	if [ -e /hive ] && [ ! -L /hive ]; then
		mkdir -p /config/hive
		mv -f /hive /config/hive/
		mv -f /hive-config /config/hive/
		mv -f /home/root/.profile /config/hive/home/root/
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi
	echo
	echo "> Extracting $package_file_to_download"
	if [ ! -d /config/hive ]; then
		mkdir /config/hive
	fi
	tar -xzv -f "$package_file_to_download"
	cp -rf hiveos-asic-${release_version_to_install}/* /config/hive/
	[ $? -ne 0 ] && echo "Error extracting $package_file_to_download" && exit "$exitcode_NOT_OK"

	rm "$package_file_to_download"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi

	if grep -F '### HIVE AUTORUN ###' /config/network.conf || grep -F 'ln -s /config/hive/hive/ /hive' /config/network.conf; then
		echo '/config/network.conf skip'
	else
		cat >> /config/network.conf <<FILEEOF

### HIVE AUTORUN ###
[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_innosilicon () {
	download_url
	echo
	mount -o remount,rw,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs /
	echo "> Extracting $package_file_to_download"
	if [ ! -d /config/hive ]; then
		mkdir -p /config/hive
	fi
	if [ ! -d /hive ]; then
		mkdir /hive
	fi
	tar -xzv -f "$package_file_to_download"
	cp -rf hiveos-asic-${release_version_to_install}/hive-config /config/hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/bin /config/hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/etc /config/hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/sbin /hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/lib /hive/
	cp -rf hiveos-asic-${release_version_to_install}/home/root/.profile /etc/profile.d/hive.sh
	cp -rf hiveos-asic-${release_version_to_install}/hive/share/innosilicon/* /etc/systemd/system/
	[ $? -ne 0 ] && echo "Error extracting $package_file_to_download" && exit "$exitcode_NOT_OK"

	rm "$package_file_to_download"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	[ ! -L /hive/bin ] && [ ! -e /hive/bin ] && ln -s /config/hive/bin /hive/bin
	[ ! -L /hive/etc ] && [ ! -e /hive/etc ] && ln -s /config/hive/etc /hive/etc
	[ ! -L /hive-config ] && [ ! -e /hive-config ] && ln -s /config/hive/hive-config/ /hive-config
	[ ! -L /hive/sbin/nc ] && [ ! -e /hive/sbin/nc ] && ln -s /hive/sbin/busybox.nosuid /hive/sbin/nc

	#systemd autorun and cron
	systemctl daemon-reload
	systemctl is-enabled hive.service > /dev/null
	[ $? -eq 1 ] && systemctl enable hive.service
	systemctl start hive.service
	systemctl is-enabled hive-agent-screen.timer > /dev/null
	[ $? -eq 1 ] && systemctl enable hive-agent-screen.timer
	systemctl start hive-agent-screen.timer
	systemctl is-enabled hive-cache-ip.timer > /dev/null
	[ $? -eq 1 ] && systemctl enable hive-cache-ip.timer
	systemctl start hive-cache-ip.timer

	sleep 2
	nohup sync && sleep 600 && mount -o remount,ro,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs / &

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
	systemctl start hive.service
}

install_innosilicon_innominer () {
	download_url
	echo
	mount -o remount,rw,relatime -t jffs2 /dev/root /

	echo "> Extracting $package_file_to_download"
	[ ! -d /hive ] && mkdir /hive
	tar -xzv -f "$package_file_to_download"
	cp -rf hiveos-asic-${release_version_to_install}/hive-config /innocfg/
	cp -rf hiveos-asic-${release_version_to_install}/hive /
#	cp -rf hiveos-asic-${release_version_to_install}/home/root/.profile /etc/profile.d/hive.sh
	[ $? -ne 0 ] && echo "Error extracting $package_file_to_download" && exit "$exitcode_NOT_OK"
	rm "$package_file_to_download"

	[ ! -L /hive-config ] && [ ! -e /hive-config ] && ln -s /innocfg/hive-config/ /hive-config

	#autorun
	if grep -F '### HIVE AUTORUN ###' /etc/init.d/rcS; then
		echo '/etc/init.d/rcS skip'
	else
		cat >> /etc/init.d/rcS <<FILEEOF

### HIVE AUTORUN ###
[ -e /hive/bin/hive ] && nohup /hive/sbin/bash -c 'sleep 30; /hive/bin/hive > /tmp/hive-boot.log; echo "Running hive..."' > /dev/null 2>&1 &
[ -e /hive/bin/hello ] && nohup /hive/sbin/bash -c 'sleep 40; /hive/bin/hello' > /dev/null 2>&1 &
[ -e /hive/bin/cron1 ] && nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
[ -e /hive/bin/cron2 ] && nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &
FILEEOF
	fi

	#PATH
	if grep -F '### HIVE PROFILE ###' /etc/profile; then
		echo '/etc/profile skip'
	else
		cat >> /etc/profile <<FILEEOF

### HIVE PROFILE ###
export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib
FILEEOF
	fi

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	sync
	sleep 5
	mount -o remount,ro,relatime -t jffs2 /dev/root /

	/hive/bin/hive
	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_zig () {
	download_url
	echo
	echo "> Extracting $package_file_to_download"
	tar -xzv -f "$package_file_to_download"
	cp -rf hiveos-asic-${release_version_to_install}/* /
	[ $? -ne 0 ] && echo "Error extracting $package_file_to_download" && exit "$exitcode_NOT_OK"

	rm "$package_file_to_download"

	sleep 2

	ln -s /bin/busybox /bin/nc
	cp -rf /hive/share/zig/crontab.root /etc/cron.d/hive
	cp -rf /home/root/.profile /etc/profile.d/hive.sh
	/etc/init.d/cron restart
	apt update
	apt install -y curl screen jq
	sed -i 's/#!\/bin\/sh/#!\/bin\/bash/g' "/hive/bin/$script_basename"
	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_todd () {
    download_url
    echo ""
    echo "> Extracting $package_file_to_download"
    tar -xzv -f "$package_file_to_download"

    cp -rf hiveos-asic-${release_version_to_install}/* /
    [ $? -ne 0 ] && echo "Error extracting $package_file_to_download" && exit "$exitcode_NOT_OK"

    rm "$package_file_to_download"

    sleep 2

    sudo cp -rf /hive/share/zig/crontab.root /etc/cron.d/hive
    cp -rf /home/root/.profile /etc/profile.d/hive.sh
    sudo /etc/init.d/cron restart
    sudo apt update
    sudo apt install -y curl screen jq dnsutils
    sed -i 's/#!\/bin\/sh/#!\/bin\/bash/g' /hive/bin/selfupgrade
    export PATH=$PATH:/hive/bin:/hive/sbin
    export LD_LIBRARY_PATH=/hive/lib

    /hive/bin/hive

    sleep 2

    #$FARM_HASH can be defined externally
    bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_bmminer_ro () {
	local sleep_counter=0
	local sleep_interval=5

	sync && echo 3 > /proc/sys/vm/drop_caches
	if ! cmp -s /etc/rcS.d/S69hive /hive/share/ant_15_17/S69hive; then
		cp -rf /hive/share/ant_15_17/S69hive /etc/rcS.d/S69hive > /dev/null 2>&1 # hide this: cp: can't stat /etc/rcS.d/S69hive
	fi
	[ -e /nvdata/latest_new.tar.gz ] && rm /nvdata/latest_new.tar.gz
	[ -e /hive ] && rm -rf /hive
	sync
	if [ "$github_FLAG" -eq 1 ]; then
		curl -L --insecure "$package_file_url" -o /nvdata/latest.tar.gz
		# !!! have to talk with Pasha about this
		#if [ $? -ne 0 ]; then
		#	echo "Error downloading $package_file_url"
		#	exit "$exitcode_NOT_OK"
		#fi
		/etc/rcS.d/S69hive
	else
		/etc/rcS.d/S69hive -f
	fi
	while [ ! -e /hive/sbin/ ]; do
		echo "> $script_basename waiting $(( sleep_counter * sleep_interval ))s when /hive/sbin/ shows up..."
		: $(( sleep_counter++ ))
		sleep "$sleep_interval"
	done
	sleep 10
}

get_asic_model () {
	#
	# !!! shall be sh-friendly
	# !!! copied from 'asic-model' script, please keep it in sync
	#
	local ASIC_MODEL=''

	# Antminer
	if [ -s /usr/bin/compile_time ]; then
		ASIC_MODEL="$( sed -n '2p' /usr/bin/compile_time )"
	fi

	# Ebit
	if [ -e /opt/system/bank.conf ]; then
		ASIC_MODEL='ebit'
	fi

	# Innosilicon
	if [ -e /etc/hwrevision ]; then
		ASIC_MODEL="$( cut -d' ' -f 2 /etc/hwrevision )"
	elif [ -s /tmp/type ]; then
		# Innosilicon A5/8
		ASIC_MODEL="$( cat /tmp/type ).$( cat /tmp/hwver )"
	fi

	# Zig
	if [ -s /var/www/html/src/Template/Layout/signin.twig ]; then
		# Zig old firmware
		ASIC_MODEL="$(
			{
				grep -Fse 'Zig' /var/www/html/src/Template/Layout/signin.twig ||
				grep -Fse 'Zig' /var/www/html/src/Template/Users/login.twig
			} |
				grep -Ese 'title|<a><b>' | sed 's/<[^>]*>//g; s/^ *//g; s/ *$//g'
		)"
		# Zig new firmware
		if [ -s /var/www/html/TYPE ]; then
			ASIC_MODEL="$( echo "$ASIC_MODEL" | sed "s/{{ type() }}/$( cat /var/www/html/TYPE )/" )"
		fi
	fi

	# Todek Toddminer C1
	if [ -e /home/sm/miner/build/cpuminer ] && [ -e /flask/setHashinJson ]; then
		ASIC_MODEL='Toddminer C1'
	fi

	# final
	if [ -n "$ASIC_MODEL" ]; then
		echo "$ASIC_MODEL"
	else
		echo '<unknown model>'
	fi
}

get_hiveon_version () {
	#
	# !!! shall be sh-friendly
	# !!! copied from 'asic-model' script, please keep it in sync
	#
	local HIVEON_VER=''

	if [ -s /usr/bin/compile_ver ]; then 
		HIVEON_VER="$( cat /usr/bin/compile_ver | awk -F'@' 'NR==3 {print $1; exit}' )"
		echo "$HIVEON_VER"
	fi
}

set_ASIC_MODEL_variable () {
	ASIC_MODEL="$( get_asic_model )"
}

set_HIVEON_VER_variable () {
	HIVEON_VER="$( get_hiveon_version )"
}

get_remote_version_of () {
	#
	# get_remote_version 'release'|'build'
	#

	# args

	local release_or_build="${1-release}"

	# consts

	local repo_url='https://raw.githubusercontent.com/minershive/hiveos-asic/master'
	local release_url="$repo_url/hive/etc/VERSION"
	local build_url="$repo_url/hive/etc/build"
	local wget_cmd='wget -q -O-'
	local curl_cmd='curl -f --silent -L --insecure'

	# vars

	local download_url=''
	local download_cmd=''

	# code

	case "$release_or_build" in
		'release')
			download_url="$release_url"
			;;
		'build')
			download_url="$build_url"
			;;
	esac

	case "$ASIC_MODEL" in
		'Zig Z1+' | 'Zig Z1')
			download_cmd="$wget_cmd"
			;;
		*)
			download_cmd="$curl_cmd"
			;;
	esac

	$download_cmd "$download_url" # stdout and exit code in one package!
}

get_local_version_of () {
	#
	# get_local_version 'release'|'build'
	#

	# args

	local release_or_build=${1-"release"}

	# consts

	local release_file='/hive/etc/VERSION'
	local build_file='/hive/etc/build'

	# vars

	local local_file_with_version=''
	local local_version=''

	# code

	case "$release_or_build" in
		'release')
			local_file_with_version="$release_file"
			;;
		'build')
			local_file_with_version="$build_file"
			;;
	esac

	if [ -s "$local_file_with_version" ]; then
		local_version="$( cat "$local_file_with_version" )"
	else
		local_version='0'
	fi

	echo "$local_version"
}

get_remote_and_local_versions () {
	remote_release_version="$( get_remote_version_of 'release' )"; repo_connectivity_status_exitcode=$?
	remote_build_version="$( get_remote_version_of 'build' )"
	local_release_version="$( get_local_version_of 'release' )"
	local_build_version="$( get_local_version_of 'build' )"
}

print_info () {
	echo "ASIC model: $ASIC_MODEL"

	echo -n 'Client local version: '
	if [ "$local_release_version" = '0' ]; then
		echo '<not installed>'
	else
		echo -n "${local_release_version}"
		if [ "$local_build_version" = '0' ]; then
			echo '-release'
		else
			echo "-${local_build_version}"
		fi
	fi

	echo -n 'Client latest version: '
	if [ "$repo_connectivity_status_exitcode" -ne 0 ] || [ -z "$remote_release_version" ]; then
		echo '<no connection>'
	else
		echo "${remote_release_version}-$remote_build_version"
	fi
}

parse_arguments () {
	# parse arguments, set global vars

	# scenario 1: 'selfupgrade'
	# scenario 2: 'selfupgrade --force'
	# scenario 3: 'selfupgrade 0.1-12'
	# scenario 4: 'selfupgrade 0.1-12 --force'
	# scenario 5: 'selfupgrade master'
	# scenario 6: 'selfupgrade master github'
	# scenario 7: 'selfupgrade master dev357'

	case "$1" in
		'master')
			master_FLAG=1
			case "$2" in
				# 'master github' or 'master devNNN'
				'github')
					github_FLAG=1
					;;
				"${local_build_version}")
					dont_have_to_update_FLAG=1
					;;
			esac
			;;

		'-f' | '--force')
			force_FLAG=1
			;;

		*[0-9].[0-9]*)
			# roughly correct pattern for Client release version: 0.1 / 0.1-13
			user_defined_version_ARG="$1"
			case "$2" in
				'-f' | '--force')
					force_FLAG=1
					;;
			esac
			;;

		'')
			# no parameters given
			: ok go ahead
			;;

		'--help' | '-h' | *)
			# here goes all other incorrect stuff
			print_script_usage
			exit "$exitcode_NOT_OK"
			;;
	esac
}

set_package_url_and_file () {
	if [ "$master_FLAG" -eq 1 ]; then
		release_version_to_install='master'
		package_file_to_download='master.tar.gz'
	elif [ -n "$user_defined_version_ARG" ]; then
		if [ "$user_defined_version_ARG" = "$local_release_version" ]; then
			dont_have_to_update_FLAG=1
		fi
		release_version_to_install="$user_defined_version_ARG"
		package_file_to_download="v${release_version_to_install}.tar.gz"
	else
		if [ "$local_release_version" = "$remote_release_version" ]; then
			# there's no new version
			dont_have_to_update_FLAG=1
		fi
		release_version_to_install="$remote_release_version"
		package_file_to_download="v${release_version_to_install}.tar.gz"
	fi
	package_file_url="http://github.com/minershive/hiveos-asic/archive/${package_file_to_download}"
}

print_update_info () {
	if [ "$master_FLAG" -eq 1 ]; then
		echo -n '> Master mode, using dev build '
		if [ "$github_FLAG" -eq 1 ]; then
			echo -n '(latest from Github)'
		fi
		echo
	fi

	echo -n 'Update to version: '
	if [ "$dont_have_to_update_FLAG" -eq 1 ]; then
		if [ "$force_FLAG" -eq 1 ]; then
			echo "$release_version_to_install (forced)"
		else
			echo "$release_version_to_install (no need to update)"
			echo
			echo -e "${GREEN}Hive is up to date already${NOCOLOR}"
			echo
			echo -e "${WHITE}Hint:${NOCOLOR} you can run ${CYAN}$script_basename --force${NOCOLOR} or ${CYAN}$script_basename 0.1-13 --force${NOCOLOR} to force update"
			echo
			exit $repo_connectivity_status_exitcode
		fi
	else
		if [ -z "$user_defined_version_ARG" ]; then
			echo "$release_version_to_install"
		else
			echo "$user_defined_version_ARG (user-defined)"
		fi
	fi
}

set_temp_dir () {
	temp_dir=$( df -h | grep -F '/tmp' | awk '{print $NF}' ) # find an existing temp dir
	[ -z "$temp_dir" ] && temp_dir='/tmp'
	cd "$temp_dir"
}

remove_needless_files () {
	#
	# remove_needless_files 'filename' ['file'...]
	#
	# wildcards are supported
	#

	# args

	if [ $# -eq 0 ]; then
		return
	fi

	# vars

	local file_to_remove=''
	local f=''
	local something_removed_FLAG=0

	# code

	echo -n '> Cleaning: '
	for file_to_remove in "$@"; do
		# iterate over the arguments
		for f in $file_to_remove; do
			# auxiliary loop is just for expanding the glob--note 'break' statement
			if [[ -e "$f" ]]; then
				echo -n "$file_to_remove"
				if rm -rf "$file_to_remove" > /dev/null 2>&1; then
					something_removed_FLAG=1
					echo -n ' '
				else
					echo -n ' (FAIL) '
				fi
			fi
			break
		done
	done

	if [ "$something_removed_FLAG" -gt 0 ]; then
		echo
	else
		echo 'all is clean'
	fi
}

execute_install_routine () {
	echo -n '> Installing Client for '

	case "$ASIC_MODEL" in

		# Antminer, exact match

		'Antminer A3'			|\
		'Antminer D3'			|\
		'Antminer DR3'			|\
		'Antminer L3++'			|\
		'Antminer S7'			|\
		'Antminer X3')			echo "$ASIC_MODEL";				install_antminer_cgminer		;;

		'Antminer E3'			|\
		'Antminer S9 Hydro'		|\
		'Antminer S9'			|\
		'Antminer S9i'			|\
		'Antminer S9j'			|\
		'Antminer S11'			|\
		'Antminer T9'			|\
		'Minecenter S9')		echo "$ASIC_MODEL";				install_antminer_bmminer		;;

		'Antminer S9 SE'		|\
		'Antminer S9k'			|\
		'Antminer S15'			|\
		'Antminer T15'			|\
		'Antminer X17')			echo "$ASIC_MODEL";				install_antminer_bmminer_ro		;;

		'Antminer Z9-Mini')		echo "$ASIC_MODEL";				install_antminer_Z9_cgminer		;;

		'Antminer ')			echo 'Antminer B3';				install_antminer_bmminer		;;

		# Antminer, partial match

		'Antminer D3 Blissz'*)	echo 'Antminer D3 Blissz';		install_antminer_cgminer		;;
		'Antminer L3+'*)		echo 'Antminer L3+';			install_antminer_cgminer		;;
		'Antminer S9 (vnish'*)	echo 'Antminer S9 vnish';		install_antminer_bmminer		;;
		'Antminer S9'*)			echo 'Antminer S9';				install_antminer_bmminer		;;
		'Antminer S10'*)		echo 'Antminer S10';			install_antminer_bmminer		;;
		'Antminer S17'*)		echo 'Antminer S17';			install_antminer_bmminer_ro		;;
		'Antminer T9+'*)		echo 'Antminer T9+';			install_antminer_bmminer		;;
		'Antminer T9'*)			echo 'Antminer T9';				install_antminer_bmminer		;;
		'Antminer T17'*)		echo 'Antminer T17';			install_antminer_bmminer_ro		;;
		'Antminer Z9'*)			echo 'Antminer Z9';				install_antminer_Z9_cgminer		;;
		'Antminer Z11'*)		echo 'Antminer Z11';			install_antminer_Z9_cgminer		;;

		# Innosilicon

		'b29+.g19')				echo 'Innosilicon A9';			install_innosilicon				;;
		'd9.g19')				echo 'Innosilicon D9';			install_innosilicon				;;
		's11.g19')				echo 'Innosilicon S11';			install_innosilicon				;;
		't2th.soc')				echo 'Innosilicon T2Th';		install_innosilicon				;;
		't2thf.soc')			echo 'Innosilicon T2Thf';		install_innosilicon				;;
		't2thm.soc')			echo 'Innosilicon T2Thm';		install_innosilicon				;;
		't2t.soc')				echo 'Innosilicon T2T-24T';		install_innosilicon				;;
		't2t+.soc')				echo 'Innosilicon T2T+(32T)';	install_innosilicon				;;
		't2th+.soc')			echo 'Innosilicon T2TH+';		install_innosilicon				;;
		't2thf+.soc')			echo 'Innosilicon T2THf+';		install_innosilicon				;;
		't2thl+.soc')			echo 'Innosilicon T2THl+';		install_innosilicon				;;
		't2ti.soc')				echo 'Innosilicon T2Ti-25T';	install_innosilicon				;;
		't2ts.soc')				echo 'Innosilicon T2Ts-26T';	install_innosilicon				;;
		't2tz.soc')				echo 'Innosilicon T2Tz-30T';	install_innosilicon				;;
		't3.soc')				echo 'Innosilicon T3';			install_innosilicon				;;
		't3+.soc')				echo 'Innosilicon T3+';			install_innosilicon				;;
		't3h+.soc')				echo 'Innosilicon T3H+';		install_innosilicon				;;
		'T4.G19')				echo 'Innosilicon A8';			install_innosilicon_innominer	;;

		# Zig

		'Zig Z1+'				|\
		'Zig Z1')				echo "$ASIC_MODEL"; 			install_zig						;;

		# Todek

		'Toddminer C1')			echo "$ASIC_MODEL"; 			install_todd					;;

		# unknown

		*)
			echo "'$ASIC_MODEL'"
			echo
			echo 'ERROR: model not supported'
			echo
			echo 'Please contact us: https://t.me/hiveonasic_en'
			echo '                   https://t.me/hiveonasic'
			echo '                   bee@hiveos.farm'
			echo
			exit "$exitcode_NOT_OK"
			;;
	esac
}

exit_if_no_repository_available () {
	if [ "$repo_connectivity_status_exitcode" -ne 0 ] || [ -z "$remote_release_version" ]; then
		echo
		echo "ERROR: Can't get current version from repository. Check your internet connection."
		exit $repo_connectivity_status_exitcode
	fi
}

delayed_agent_screen_restart () {
	echo '> Deploying delayed agent restart'
	nohup /hive/sbin/bash -c 'for sig in HUP INT EXIT; do trap "echo $sig" $sig; done; trap; echo ': Sleeping...'; sleep 3; echo ': Agent restarting'; agent-screen restart; sleep 1; echo ': Restarting again...'; agent-screen start; sleep 1; echo ':Restarting again...'; agent-screen start' > /tmp/selfupgrade-agent-screen-restart.log 2>&1 & # have to see what's going on
}


# global consts

readonly exitcode_OK=0
readonly exitcode_NOT_OK=1
[ -s /hive/bin/colors ] && source /hive/bin/colors


# global vars

ASIC_MODEL=''

remote_release_version=''
remote_build_version=''
local_release_version=''
local_build_version=''

repo_connectivity_status_exitcode=0

dont_have_to_update_FLAG=0
force_FLAG=0
github_FLAG=0
master_FLAG=0

user_defined_version_ARG=''

release_version_to_install=''
package_file_to_download=''
package_file_url=''


# code

print_script_version
set_ASIC_MODEL_variable
set_HIVEON_VER_variable
get_remote_and_local_versions
print_info
exit_if_no_repository_available
parse_arguments "$@"
set_package_url_and_file
print_update_info
set_temp_dir
remove_needless_files "${temp_dir}/hive/*" "${temp_dir}/hiveos-asic*" "${temp_dir}/$script_basename" "${temp_dir}/master.tar.gz" "${temp_dir}/v*.tar.gz" "$package_file_to_download"

execute_install_routine

#Don't restart it...
#echo -e '> Saying hello to server again'
#hello restartminer

remove_needless_files "${temp_dir}/hiveos-asic*"
delayed_agent_screen_restart

echo
echo -e "${GREEN}Update complete. Have a happy mining.${NOCOLOR}"

sync
exit "$exitcode_OK"
