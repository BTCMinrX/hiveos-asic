#!/bin/sh


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE
#
# Linted by shellcheck 0.3.7
#


readonly script_mission='Client for ASICs: Update/install Client from repository'
readonly script_version='0.14.26'
readonly script_basename="$( basename "$0" )"


# functions

print_script_version () {
	echo -e "${YELLOW}${script_mission}, version ${script_version}${NOCOLOR}"
	echo
}

print_script_usage () {
	echo
	echo 'Usage examples:'
	echo
	echo -e "  ${CYAN}${script_basename}${NOCOLOR}                               update to the latest release version"
	echo -e "  ${CYAN}${script_basename} -f|--force${NOCOLOR}                    force update to the latest release version"
	echo -e "  ${CYAN}${script_basename} 0.1-13${NOCOLOR}                        update to release 0.1-13"
	echo -e "  ${CYAN}${script_basename} 0.1-13 -f|--force${NOCOLOR}             force update to release 0.1-13"
	echo
	echo -e "  ${CYAN}${script_basename} master${NOCOLOR}                        stable dev build (beta), force"
	echo -e "  ${CYAN}${script_basename} master --skip-version=dev347${NOCOLOR}  stable dev build (beta), skip if local build == dev347"
	echo -e "  ${CYAN}${script_basename} master -g|--github${NOCOLOR}            force update Antminer 15/17 and S9k/S9SE to the latest build from Github (alpha)"
	echo -e "  ${CYAN}${script_basename} master-dev${NOCOLOR}                    force update Antminer 15/17 and S9k/S9SE to the latest build from Hive server (alpha)"
	echo
	echo -e "  ${CYAN}${script_basename} master github${NOCOLOR}                 DEPRECATED"
	echo -e "  ${CYAN}${script_basename} master dev347${NOCOLOR}                 DEPRECATED"
	echo
}

die () {
	local incoming_exitcode=$? # !!! must be the first line in a function to catch an incoming error code -- do not move

	# args

	local message="$1"
	local exitcode="${2:-$incoming_exitcode}"

	# code

	echo "$message"
	exit "$exitcode"
} 2>&1

is_curl_available () {
# ??? which curl > /dev/null
	case "$ASIC_MODEL" in
		'Zig Z1' | 'Zig Z1+')	false	;; # 'Toddminer C1' removed
		*)						true	;;
	esac
}

download_from_url () {
	#
	# Usage: download_from_url 'URL' 'local_file_name'
	#
	# download using curl or wget
	# 
	# TODO bulletproof download + multiple sources

	# args

	local URL="$1"
	local local_file_name="$2"

	# vars

	local reported_item=''
	local downloader_exitcode="$exitcode_OK"
	local downloader_output=''

	# code

# I don't think we have to have so many choices
#	if [ -n "$local_file_name" ]; then
		reported_item="$local_file_name"
		echo "> Downloading ${reported_item}..."
		if is_curl_available; then
			downloader_output="$( curl --insecure --location --fail --silent --show-error --output "$local_file_name" "$URL" 2>&1 )"
		else
			downloader_output="$( wget --quiet --output-document="$local_file_name" "$URL" 2>&1 )"
		fi
#	else
#		reported_item="$URL"
#		echo "> Downloading ${reported_item}..."
#		if is_curl_available; then
#			downloader_output="$( curl --insecure --location --fail --silent --show-error --remote-name "$URL" 2>&1 )"
#		else
#			downloader_output="$( wget --quiet "$URL" 2>&1 )"
#		fi
#	fi

	downloader_exitcode=$?
	if [ "$downloader_exitcode" -eq 0 ]; then
		echo '  Downloaded OK'
		#return 0
	else
		echo "$downloader_output"
		die "Error downloading $reported_item" "$downloader_exitcode"
		#echo "Error downloading $reported_item"
		#echo "$downloader_output"
		#return 1
	fi

	sleep 2 # ???
}

untar_then_remove () {
	#
	# Usage: untar_then_remove 'file_to_extract'
	#
	# in case of tar error, show output and die, else say mere 'ok'
	#

	# args

	local file_to_extract="${1-SAFE}"

	# vars

	local tar_output=''

	# code

	echo "> Extracting ${file_to_extract}..."
	if ! tar_output="$( tar -xzv -f "$file_to_extract" 2>&1 )"; then
		die "${tar_output}\n\nError extracting $file_to_extract, exiting"
	else
		echo "> Extracted OK, removing ${file_to_extract}..."
		rm -f "$file_to_extract"
	fi
}


#
# functions: install_*
#

install_antminer_bmminer () { # bmminer, / - rw, cron
	download_from_url "$package_file_url" "$package_file_to_download"
	untar_then_remove "$package_file_to_download"

	[ ! -d /config/hive/hive-config ] && mkdir -p /config/hive/hive-config
	[ -L /hive ] && rm /hive

	echo "> Copying to /..."
	cp -rf "hiveos-asic-${release_version_to_install}/hive" /	|| die '  Error copying to /'

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib
	#[ -d /hive && ! -L /hive ] && mv -f /hive /config/hive/
	[ -d /hive-config ] && [ ! -L /hive-config ] && mv -f /hive-config /config/hive/


	if [ ! -e /hive-config ]; then
		#ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
	fi
	cp -rf /hive/share/S9/S69hive /etc/rcS.d/
	cp -rf /hive/share/S9/.profile /home/root/

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_cgminer () { # cgminer, / - ro, no cron
	download_from_url "$package_file_url" "$package_file_to_download"
	untar_then_remove "$package_file_to_download"

	[ ! -d /config/hive ] && mkdir /config/hive

	echo "> Copying to /config/hive/..."
	cp -rf "hiveos-asic-${release_version_to_install}/"* /config/hive/	|| die '  Error copying to /config/hive/'

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi

	if grep -F '### HIVE AUTORUN ###' /config/network.conf || grep -F 'ln -s /config/hive/hive/ /hive' /config/network.conf || [ -n "$HIVEON_VER" ]; then
		echo '> /config/network.conf skipped'
	else
		cat >> /config/network.conf <<-FILEEOF

			### HIVE AUTORUN ###
			[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
		FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_Z9_cgminer () { # cgminer, / - rw, no cron
	download_from_url "$package_file_url" "$package_file_to_download"
	untar_then_remove "$package_file_to_download"

	if [ -e /hive ] && [ ! -L /hive ]; then
		mkdir -p /config/hive
		mv -f /hive /config/hive/
		mv -f /hive-config /config/hive/
		mv -f /home/root/.profile /config/hive/home/root/
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi
	[ ! -d /config/hive ] && mkdir /config/hive
	remove_needless_files "hiveos-asic-${release_version_to_install}/hive/sbin/teleconsole" # legacy

	echo "> Copying to /config/hive/..."
	cp -rf "hiveos-asic-${release_version_to_install}/"* /config/hive/	|| die '  Error copying to /config/hive/'

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi

	if grep -F '### HIVE AUTORUN ###' /config/network.conf || grep -F 'ln -s /config/hive/hive/ /hive' /config/network.conf; then
		echo '> /config/network.conf skipped'
	else
		cat >> /config/network.conf <<-FILEEOF

			### HIVE AUTORUN ###
			[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
		FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_innosilicon () {
	download_from_url "$package_file_url" "$package_file_to_download"
	untar_then_remove "$package_file_to_download"

	mount -o remount,rw,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs /
	[ ! -d /config/hive ]	&& mkdir -p /config/hive
	[ ! -d /hive ]			&& mkdir /hive

	### untar was right here

	echo "> Copying..."
	cp -rf "hiveos-asic-${release_version_to_install}/hive-config" /config/hive/						|| die '  Error copying'
	cp -rf "hiveos-asic-${release_version_to_install}/hive/bin" /config/hive/							|| die '  Error copying'
	cp -rf "hiveos-asic-${release_version_to_install}/hive/etc" /config/hive/							|| die '  Error copying'
	cp -rf "hiveos-asic-${release_version_to_install}/hive/sbin" /hive/									|| die '  Error copying'
	cp -rf "hiveos-asic-${release_version_to_install}/hive/lib" /hive/									|| die '  Error copying'
	cp -rf "hiveos-asic-${release_version_to_install}/home/root/.profile" /etc/profile.d/hive.sh		|| die '  Error copying'
	cp -rf "hiveos-asic-${release_version_to_install}/hive/share/innosilicon/"* /etc/systemd/system/	|| die '  Error copying'

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	[ ! -L /hive/bin ]		&& [ ! -e /hive/bin ]		&& ln -s /config/hive/bin /hive/bin
	[ ! -L /hive/etc ]		&& [ ! -e /hive/etc ]		&& ln -s /config/hive/etc /hive/etc
	[ ! -L /hive-config ]	&& [ ! -e /hive-config ]	&& ln -s /config/hive/hive-config/ /hive-config
	[ ! -L /hive/sbin/nc ]	&& [ ! -e /hive/sbin/nc ]	&& ln -s /hive/sbin/busybox.nosuid /hive/sbin/nc

	#systemd autorun and cron
	systemctl daemon-reload
	systemctl is-enabled hive.service > /dev/null
	[ $? -eq 1 ] && systemctl enable hive.service
	systemctl start hive.service
	systemctl is-enabled hive-agent-screen.timer > /dev/null
	[ $? -eq 1 ] && systemctl enable hive-agent-screen.timer
	systemctl start hive-agent-screen.timer
	systemctl is-enabled hive-cache-ip.timer > /dev/null
	[ $? -eq 1 ] && systemctl enable hive-cache-ip.timer
	systemctl start hive-cache-ip.timer

	sleep 2
	nohup sync && sleep 600 && mount -o remount,ro,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs / &

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
	systemctl start hive.service
}

install_innosilicon_innominer () {
	download_from_url "$package_file_url" "$package_file_to_download"
	untar_then_remove "$package_file_to_download"

	mount -o remount,rw,relatime -t jffs2 /dev/root /
	[ ! -d /hive ] && mkdir /hive

	### untar was right here
	
	echo "> Copying to /innocfg/..."
	cp -rf "hiveos-asic-${release_version_to_install}/hive-config" /innocfg/						|| die '  Error copying to /innocfg/'
	echo "> Copying to /..."
	cp -rf "hiveos-asic-${release_version_to_install}/hive" /										|| die '  Error copying to /'
#	cp -rf "hiveos-asic-${release_version_to_install}/home/root/.profile" /etc/profile.d/hive.sh	|| die '  Error copying to /etc/profile.d/hive.sh'

	[ ! -L /hive-config ] && [ ! -e /hive-config ] && ln -s /innocfg/hive-config/ /hive-config

	#autorun
	if grep -F '### HIVE AUTORUN ###' /etc/init.d/rcS; then
		echo '> /etc/init.d/rcS skipped'
	else
		cat >> /etc/init.d/rcS <<-FILEEOF

			### HIVE AUTORUN ###
			[ -e /hive/bin/hive ] && nohup /hive/sbin/bash -c 'sleep 30; /hive/bin/hive > /tmp/hive-boot.log 2>&1; echo "Running Hive..."' > /dev/null 2>&1 &
			[ -e /hive/bin/hello ] && nohup /hive/sbin/bash -c 'sleep 40; /hive/bin/hello' > /dev/null 2>&1 &
			[ -e /hive/bin/cron1 ] && nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
			[ -e /hive/bin/cron2 ] && nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &
		FILEEOF
	fi

	#PATH
	if grep -F '### HIVE PROFILE ###' /etc/profile; then
		echo '> /etc/profile skipped'
	else
		cat >> /etc/profile <<-FILEEOF

			### HIVE PROFILE ###
			export PATH=$PATH:/hive/bin:/hive/sbin
			export LD_LIBRARY_PATH=/hive/lib
		FILEEOF
	fi

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	sync
	sleep 5
	mount -o remount,ro,relatime -t jffs2 /dev/root /

	/hive/bin/hive
	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_zig () {
	download_from_url "$package_file_url" "$package_file_to_download"
	untar_then_remove "$package_file_to_download"

	echo "> Copying to /..."
	cp -rf "hiveos-asic-${release_version_to_install}/"* /	|| die ' Error copying to /'

	sleep 2

	ln -s /bin/busybox /bin/nc
	cp -rf /hive/share/zig/crontab.root /etc/cron.d/hive
	cp -rf /home/root/.profile /etc/profile.d/hive.sh
	/etc/init.d/cron restart
	apt update
	apt install -y curl screen jq
	sed -i 's/#!\/bin\/sh/#!\/bin\/bash/g' "/hive/bin/$script_basename"
	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_todd () {
	download_from_url "$package_file_url" "$package_file_to_download"
	untar_then_remove "$package_file_to_download"

	echo "> Copying to /..."
	cp -rf "hiveos-asic-${release_version_to_install}/"* /	|| die '  Error copying to /'

	sleep 2

	cp -rf /hive/share/zig/crontab.root /etc/cron.d/hive
	cp -rf /home/root/.profile /etc/profile.d/hive.sh
	/etc/init.d/cron restart
	apt update
	apt install -y curl screen jq dnsutils
	sed -i 's/#!\/bin\/sh/#!\/bin\/bash/g' "/hive/bin/$script_basename"
	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

wait_for_file () {
	#
	# wait_for_file 'file_to_wait' ['timeout_in_seconds'(default:300s)]
	#
	# waits for file or directory
	#

	# args

	if [ $# -lt 1 ]; then
		return 2
	fi
	local file_to_wait="$1"
	local timeout_in_seconds="${2:-300}"
	
	# consts

	local sleep_interval_in_seconds=1
	local print_message_every=30

	# vars

	local countdown="$timeout_in_seconds"
	local is_file_found=0
	local waiting_time=0

	# code

	until [ "$countdown" -le 0 ]; do
		if [ -e "$file_to_wait" ]; then
			is_file_found=1
			break
		else
			waiting_time=$(( timeout_in_seconds - countdown ))
			message="> $script_basename has to wait ${countdown}s for '${file_to_wait}'... "
			if [ $(( waiting_time % print_message_every )) -eq 0 -a ! -t 1 ]; then
				echo "$message" # print every 30s -- if file not found yet and no terminal connected
			elif [ -t 1 ]; then
				echo -n -e "\r$message" # print every step on the same line -- if file not found yet and terminal connected
			fi
			: $(( countdown -= 1 ))
			sleep "$sleep_interval_in_seconds"
		fi
	done


	if [ "$is_file_found" -ne 1 ]; then
		[ -t 1 ] && echo -n -e '\r'
		echo "> $script_basename has been waiting for $(( waiting_time + 1 ))s: '${file_to_wait}' still not found."
	elif [ "$waiting_time" -ne 0 ]; then
		[ -t 1 ] && echo -n -e '\r'
		echo "> $script_basename has been waiting for $(( waiting_time + 1 ))s: '${file_to_wait}' found!"
	fi

	return $(( is_file_found==0 ))
}

install_antminer_bmminer_ro () {
	local system_S69hive='/etc/rcS.d/S69hive'
	local updated_S69hive='/hive/share/ant_15_17/S69hive'

	sync && echo 3 > /proc/sys/vm/drop_caches

	[ ! -f "$updated_S69hive" ] && die '  Installing without a firmware NOT IMPLEMENTED YET' # TODO

	if [ ! -f "$system_S69hive" ] || ! cmp -s "$system_S69hive" "$updated_S69hive"; then
		cp -f "$updated_S69hive" "$system_S69hive" # TODO install on a clean ASIC (without S69hive at all)
	fi

	if [ "$github_FLAG" -eq 1 ] || [ "$dev_build_FLAG" -eq 1 ]; then
		download_from_url "$package_file_url" '/nvdata/latest.tar.gz'

		remove_needless_files '/nvdata/latest_new.tar.gz'
		[ -e /hive ] && rm -rf /hive
		sync
		/etc/rcS.d/S69hive
	else
		remove_needless_files '/nvdata/latest_new.tar.gz'
		[ -e /hive ] && rm -rf /hive
		sync
		/etc/rcS.d/S69hive --force-download
	fi

	wait_for_file '/hive/share/zzz/EOF' # max 5 min

	echo "  Installed build: $( cat /hive/etc/build )"
}


#
# installation end
#

get_asic_model () {
	#
	# !!! shall be sh-friendly
	# !!! copied from 'asic-model' script, please keep it in sync
	#
	local ASIC_MODEL=''

	# Antminer
	if [ -s /usr/bin/compile_time ]; then
		ASIC_MODEL="$( sed -n '2p' /usr/bin/compile_time )"
	fi

	# Ebit
	if [ -e /opt/system/bank.conf ]; then
		ASIC_MODEL='ebit'
	fi

	# Innosilicon
	if [ -e /etc/hwrevision ]; then
		ASIC_MODEL="$( cut -d' ' -f 2 /etc/hwrevision )"
	elif [ -s /tmp/type ]; then
		# Innosilicon A5/8
		ASIC_MODEL="$( cat /tmp/type ).$( cat /tmp/hwver )"
	fi

	# Zig
	if [ -s /var/www/html/src/Template/Layout/signin.twig ]; then
		# Zig old firmware
		ASIC_MODEL="$(
			{
				grep -Fse 'Zig' /var/www/html/src/Template/Layout/signin.twig ||
				grep -Fse 'Zig' /var/www/html/src/Template/Users/login.twig
			} |
				grep -Ese 'title|<a><b>' | sed 's/<[^>]*>//g; s/^ *//g; s/ *$//g'
		)"
		# Zig new firmware
		if [ -s /var/www/html/TYPE ]; then
			ASIC_MODEL="$( echo "$ASIC_MODEL" | sed "s/{{ type() }}/$( cat /var/www/html/TYPE )/" )" #"# syntax highliting fix
		fi
	fi

	# Todek Toddminer C1 / C1 PRO
	if [ -e /home/sm/miner/build/cpuminer ] && [ -e /flask/setHashinJson ]; then
		ASIC_MODEL='Toddminer C1'
		if [ "$( /home/sm/miner/build/cpuminer -V | head -1 | grep -m1 -c 'pro' )" -eq 1 ]; then
			ASIC_MODEL="$ASIC_MODEL PRO"
		fi
	fi

	# final
	if [ -n "$ASIC_MODEL" ]; then
		echo "$ASIC_MODEL"
	else
		echo '<unknown model>'
	fi
}

get_hiveon_version () {
	#
	# !!! shall be sh-friendly
	# !!! copied from 'asic-model' script, please keep it in sync
	#
	local HIVEON_VER=''

	if [ -s /usr/bin/compile_ver ]; then 
		HIVEON_VER="$( awk -F'@' 'NR==3 {print $1; exit}' /usr/bin/compile_ver )"
		echo "$HIVEON_VER"
	fi
}

set_ASIC_MODEL_variable () {
	ASIC_MODEL="$( get_asic_model )"
}

set_HIVEON_VER_variable () {
	HIVEON_VER="$( get_hiveon_version )"
}

get_remote_version_of () {
	#
	# get_remote_version 'release'|'build'
	#

	# args

	local release_or_build="${1-release}"

	# consts

	local repo_url='https://raw.githubusercontent.com/minershive/hiveos-asic/master'
	local release_url="$repo_url/hive/etc/VERSION"
	local build_url="$repo_url/hive/etc/build"

	# vars

	local download_url=''

	# code

	case "$release_or_build" in
		'release')
			download_url="$release_url"
			;;
		'build')
			download_url="$build_url"
			;;
	esac

	if is_curl_available; then
		curl --insecure --location --fail --silent --show-error "$download_url"
	else
		wget --quiet --output-document=file- "$download_url"
	fi # stdout and exit code in one package!
}

get_local_version_of () {
	#
	# get_local_version 'release'|'build'
	#

	# args

	local release_or_build=${1-"release"}

	# consts

	local release_file='/hive/etc/VERSION'
	local build_file='/hive/etc/build'

	# vars

	local local_file_with_version=''
	local local_version=''

	# code

	case "$release_or_build" in
		'release')
			local_file_with_version="$release_file"
			;;
		'build')
			local_file_with_version="$build_file"
			;;
	esac

	if [ -s "$local_file_with_version" ]; then
		local_version="$( cat "$local_file_with_version" )"
	else
		local_version='0'
	fi

	echo "$local_version"
}

get_remote_and_local_versions () {
	remote_release_version="$( get_remote_version_of 'release' )"; repo_connectivity_status_exitcode=$?
	remote_build_version="$( get_remote_version_of 'build' )"
	local_release_version="$( get_local_version_of 'release' )"
	local_build_version="$( get_local_version_of 'build' )"
}

print_info () {
	echo "  ASIC model: $ASIC_MODEL"

	echo -n '  Client local version: '
	if [ "$local_release_version" = '0' ]; then
		echo '<not installed>'
	else
		echo -n "${local_release_version}"
		if [ "$local_build_version" = '0' ]; then
			echo '-release'
		else
			echo "-${local_build_version}"
		fi
	fi

	echo -n '  Client latest version: '
	if [ "$repo_connectivity_status_exitcode" -ne 0 ] || [ -z "$remote_release_version" ]; then
		echo '<no connection>'
	else
		echo "${remote_release_version}-$remote_build_version"
	fi
}

parse_arguments () {
	# parse arguments, set global vars

	# vars

	local this_ARG=''

	# code

	for this_ARG in "$@"; do
		case "$this_ARG" in
			*[0-9].[0-9]*)
				# roughly correct pattern for Client release version: 0.1 / 0.1-13
				user_defined_version_ARG="$this_ARG"
				;;
			'master')
				master_FLAG=1
				;;
			'master-dev')
				master_FLAG=1
				dev_build_FLAG=1
				;;
			'-f' | '--force')
				force_update_FLAG=1
				;;
			'-g' | '--github' | 'github')
				github_FLAG=1
				;;
			"$local_build_version" | "--skip-version=$local_build_version")
				dont_have_to_update_FLAG=1
				;;
			'--help' | '-h' | *)
				# here goes all other incorrect stuff
				print_script_usage
				die
				;;
		esac
	done
}

set_package_url_and_file () {
	local download_url="$our_server_download_url_stable"

	# holy guacamole

	if [ "$master_FLAG" -eq 1 ]; then
		release_version_to_install='master'
		package_file_to_download="${release_version_to_install}.tar.gz"
	elif [ -n "$user_defined_version_ARG" ]; then
		release_version_to_install="$user_defined_version_ARG"
		package_file_to_download="v${release_version_to_install}.tar.gz"
		[ "$user_defined_version_ARG" = "$local_release_version" ] && dont_have_to_update_FLAG=1
	else
		release_version_to_install="$remote_release_version"
		package_file_to_download="v${release_version_to_install}.tar.gz"
		[ "$local_release_version" = "$remote_release_version" ] && dont_have_to_update_FLAG=1
	fi

	[ "$github_FLAG" -eq 1 ]	&& download_url="$github_download_url"
	[ "$dev_build_FLAG" -eq 1 ]	&& download_url="$our_server_download_url_dev_build"

	package_file_url="${download_url}${package_file_to_download}"
}

print_update_info () {
	if [ "$master_FLAG" -eq 1 ]; then
		echo -n '> Master mode ON, using dev build '
		if [ "$github_FLAG" -eq 1 ]; then
			echo -n '(latest from Github)'
		elif [ "$dev_build_FLAG" -eq 1 ]; then
			echo -n '(latest from Hive server)'
		fi
		echo
	fi

	echo -n '  Update to version: '
	if [ "$dont_have_to_update_FLAG" -eq 1 ]; then
		if [ "$force_update_FLAG" -eq 1 ]; then
			echo "$release_version_to_install (forced)"
		else
			echo "$release_version_to_install (no need to update)"
			echo
			echo -e "${GREEN}Hive is up to date already${NOCOLOR}"
			echo
			echo -e "${WHITE}Hint:${NOCOLOR} you can run ${CYAN}$script_basename --force${NOCOLOR} or ${CYAN}$script_basename 0.1-13 --force${NOCOLOR} to force update"
			exit "$repo_connectivity_status_exitcode" # die() isn't suitable here
		fi
	else
		if [ -z "$user_defined_version_ARG" ]; then
			echo "$release_version_to_install"
		else
			echo "$user_defined_version_ARG (user-defined)"
		fi
	fi
}

set_temp_dir () {
	temp_dir=$( df -h | grep -F '/tmp' | awk '{print $NF}' ) # find an existing temp dir
	[ -z "$temp_dir" ] && temp_dir='/tmp'
	cd "$temp_dir"
}

remove_needless_files () {
	#
	# remove_needless_files 'filename' ['file'...]
	#
	# wildcards are supported
	#

	# args

	if [ $# -eq 0 ]; then
		return
	fi

	# vars

	local is_something_removed_FLAG=0
	local file_to_remove='' f='' message_body=''

	# code

	for file_to_remove in "$@"; do
		# iterate over the arguments
		for f in $file_to_remove; do
			# auxiliary loop is just for expanding the glob -- note 'break' statement
			if [ -e "$f" ]; then
				message_body="${message_body}${file_to_remove}"
				# shellcheck disable=SC2086
				if rm -rf $file_to_remove > /dev/null 2>&1; then
					is_something_removed_FLAG=1
					message_body="${message_body} "
				else
					message_body="${message_body} (FAIL) "
				fi
			fi
			break
		done
	done

	if [ "$is_something_removed_FLAG" -gt 0 ]; then
		echo "> Cleaning: $message_body"
	fi
}

execute_install_routine () {
	echo -n '> Installing Client for '

	case "$ASIC_MODEL" in

		# Antminer, exact match

		'Antminer A3'			|\
		'Antminer D3'			|\
		'Antminer DR3'			|\
		'Antminer L3++'			|\
		'Antminer S7'			|\
		'Antminer X3')			echo "$ASIC_MODEL";				install_antminer_cgminer		;;

		'Antminer E3'			|\
		'Antminer S9 Hydro'		|\
		'Antminer S9'			|\
		'Antminer S9i'			|\
		'Antminer S9j'			|\
		'Antminer S11'			|\
		'Antminer T9'			|\
		'Minecenter S9')		echo "$ASIC_MODEL";				install_antminer_bmminer		;;

		'Antminer S9 SE'		|\
		'Antminer S9k'			|\
		'Antminer S15'			|\
		'Antminer T15'			|\
		'Antminer X17')			echo "$ASIC_MODEL";				install_antminer_bmminer_ro		;;

		'Antminer Z9-Mini')		echo "$ASIC_MODEL";				install_antminer_Z9_cgminer		;;

		'Antminer ')			echo 'Antminer B3';				install_antminer_bmminer		;;

		# Antminer, partial match

		'Antminer D3 Blissz'*)	echo 'Antminer D3 Blissz';		install_antminer_cgminer		;;
		'Antminer L3+'*)		echo 'Antminer L3+';			install_antminer_cgminer		;;
		'Antminer S9 (vnish'*)	echo 'Antminer S9 vnish';		install_antminer_bmminer		;;
		'Antminer S9'*)			echo 'Antminer S9';				install_antminer_bmminer		;;
		'Antminer S10'*)		echo 'Antminer S10';			install_antminer_bmminer		;;
		'Antminer S17'*)		echo 'Antminer S17';			install_antminer_bmminer_ro		;;
		'Antminer T9+'*)		echo 'Antminer T9+';			install_antminer_bmminer		;;
		'Antminer T9'*)			echo 'Antminer T9';				install_antminer_bmminer		;;
		'Antminer T17'*)		echo 'Antminer T17';			install_antminer_bmminer_ro		;;
		'Antminer Z9'*)			echo 'Antminer Z9';				install_antminer_Z9_cgminer		;;
		'Antminer Z11'*)		echo 'Antminer Z11';			install_antminer_Z9_cgminer		;;

		# Innosilicon

		'b29+.g19')				echo 'Innosilicon A9';		install_innosilicon			;;
		'd9.g19')				echo 'Innosilicon D9';		install_innosilicon			;;
		's11.g19')				echo 'Innosilicon S11';		install_innosilicon			;;
		't2th.soc')				echo 'Innosilicon T2Th';	install_innosilicon			;;
		't2thf.soc')			echo 'Innosilicon T2Thf';		install_innosilicon			;;
		't2thm.soc')			echo 'Innosilicon T2Thm';		install_innosilicon			;;
		't2t.soc')				echo 'Innosilicon T2T-24T';	install_innosilicon			;;
		't2t+.soc')				echo 'Innosilicon T2T+(32T)';	install_innosilicon			;;
		't2th+.soc')			echo 'Innosilicon T2TH+';		install_innosilicon			;;
		't2thf+.soc')			echo 'Innosilicon T2THf+';		install_innosilicon			;;
		't2thl+.soc')			echo 'Innosilicon T2THl+';		install_innosilicon			;;
		't2ti.soc')				echo 'Innosilicon T2Ti-25T';	install_innosilicon			;;
		't2ts.soc')				echo 'Innosilicon T2Ts-26T';	install_innosilicon			;;
		't2tz.soc')				echo 'Innosilicon T2Tz-30T';	install_innosilicon			;;
		't3.soc')				echo 'Innosilicon T3';		install_innosilicon			;;
		't3+.soc')				echo 'Innosilicon T3+';		install_innosilicon			;;
		't3h+.soc')				echo 'Innosilicon T3H+';	install_innosilicon			;;
		'T4.G19')				echo 'Innosilicon A8';		install_innosilicon_innominer		;;

		# Zig

		'Zig Z1+'				|\
		'Zig Z1')				echo "$ASIC_MODEL"; 		install_zig				;;

		# Todek Toddminer C1 and C1 PRO eaglesong ASICs
		'Toddminer C1'*)		echo "$ASIC_MODEL"; 			install_todd				;;

		# HashAltCoin FPGA Blackminer F1 series (multialgo)
		'Blackminer F1'* )		echo "$ASIC_MODEL";			install_antminer_cgminer		;;

		# unknown

		*)
			echo "'$ASIC_MODEL'"
			echo
			echo 'ERROR: model not supported'
			echo
			echo 'Please contact us: https://t.me/hiveonasic_en'
			echo '                   https://t.me/hiveonasic'
			echo '                   bee@hiveos.farm'
			echo
			die '' "$exitcode_NOT_OK"
			;;
	esac
}

exit_if_no_repository_available () {
	if [ "$repo_connectivity_status_exitcode" -ne 0 ] || [ -z "$remote_release_version" ]; then
		die "ERROR: Can't get current version from repository. Check your internet connection." "$repo_connectivity_status_exitcode"
	fi
}

delayed_agent_screen_restart () {
	echo '> Deploying delayed agent restart'
	nohup sh -x -c '
		trap -- "echo SIGEXIT received" EXIT
		trap -- "echo SIGINT received" INT
		trap -- "echo SIGHUP received" HUP
		echo "> Sleeping 5s..."
		sleep 5
		agent-screen restart
		echo "Done"' > /dev/null 2>&1 &
		
	# delete a file created by legacy selfupgrade
	remove_needless_files '/tmp/selfupgrade-agent-screen-restart.log'
}


# global consts

readonly our_server_download_url_stable='http://download.hiveos.farm/asic/client/'
readonly our_server_download_url_dev_build='http://download.hiveos.farm/_asic/client/'
readonly github_download_url='http://github.com/minershive/hiveos-asic/archive/'

readonly exitcode_OK=0
readonly exitcode_NOT_OK=1


# global sources

[ -s /hive/bin/colors ] && . /hive/bin/colors


# global vars

ASIC_MODEL=''

remote_release_version=''
remote_build_version=''
local_release_version=''
local_build_version=''

repo_connectivity_status_exitcode=0

dont_have_to_update_FLAG=0
force_update_FLAG=0
github_FLAG=0
dev_build_FLAG=0
master_FLAG=0

user_defined_version_ARG=''

release_version_to_install=''
package_file_to_download=''
package_file_url=''


# code

print_script_version
set_ASIC_MODEL_variable
set_HIVEON_VER_variable
get_remote_and_local_versions
print_info
exit_if_no_repository_available
parse_arguments "$@"
set_package_url_and_file
print_update_info
set_temp_dir

remove_needless_files "${temp_dir-SAFE}/hive/*" "${temp_dir-SAFE}/hiveos-asic*" "${temp_dir-SAFE}/${script_basename-SAFE}" "${temp_dir-SAFE}/master.tar.gz" "${temp_dir-SAFE}/v*.tar.gz" '/nvdata/nohup.out'
# temporary fix, might work this out later
if [ "$github_FLAG" -eq 0 ] && [ "$dev_build_FLAG" -eq 0 ]; then
	remove_needless_files "$package_file_to_download"
fi

execute_install_routine

# ??? do we still need this
#Don't restart it...
#echo -e '> Saying hello to server again'
#hello restartminer

remove_needless_files "${temp_dir-SAFE}/hiveos-asic*"
delayed_agent_screen_restart

echo
echo -e "${GREEN}Update complete. Have a happy mining.${NOCOLOR}"

sync
exit "$exitcode_OK"
