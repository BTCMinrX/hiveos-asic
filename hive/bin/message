#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE
#


source colors

RIG_CONF='/hive-config/rig.conf'
if [[ ! -s $RIG_CONF ]]; then
	echo "Config file $RIG_CONF empty or not found"
	exit 1
fi

source "$RIG_CONF"

HIVE_URL="$HIVE_HOST_URL/worker/api"
#LOG="/var/log/hive-agent.log"

if (( $# < 2 )); then
	echo -e "Usage: ${CYAN}$( basename "$0" ) success|danger|warning|info|default|tag \"message\" [payload] [-i|--id=msgid] ${NOCOLOR}"
	echo 'Aliases: ok|error|err|warn|default'
	echo 'Attention: payload is read from stdin'
	echo
	exit 1
fi

message_type="$1"
message_header="$2"

case "$message_type" in
	'error'|'err')
		message_type='danger'
		MSGCOLOR="$RED"
	;;

	'warning'|'warn')
		message_type='warning'
		MSGCOLOR="$YELLOW"
	;;

	'ok'|'success')
		message_type='success'
		MSGCOLOR="$GREEN"
	;;

	'tag')
		MSGCOLOR="$PURPLE"
	;;

	*)
		MSGCOLOR="$CYAN"
	;;
esac


request=$(
	echo "$payload_json" | jq -n \
		--arg rig_id "$RIG_ID" \
		--arg passwd "$RIG_PASSWD" \
		--arg type "$message_type" \
		--arg data "$message_header" \
		'{
			"method": "message", "jsonrpc": "2.0", "id": 0,
			"params": {$rig_id, $passwd, $type, $data}
		}'
)
#echo "$request" | jq .

id=''
payload=''
for this_argument in "${@:3}"; do
	case "$this_argument" in
		'-i='*|'--id='*)
			id="${this_argument#*=}"
			id_json="$( jq --arg id "$id" -n '{"params": {$id}}' )"
			request="$( echo "$request $id_json" | jq -sc '.[0] * .[1]' )"
		;;
		'payload'|'--payload')
			payload="$( < /dev/stdin )"
			payload_json="$( echo -n "$payload" | jq -R -s '{"params": {"payload": .}}' )"
			request="$( echo "$request $payload_json" | jq -sc '.[0] * .[1]' )"
		;;
		*)
			echo "ERROR: unknown option '$this_argument'"
		;;
# TODO file): gzip -c /usr/sbin/dropbearmulti | openssl base64 -e -A | message file 'dropbearmulti' payload
	esac
done

if [[ -z "$payload" ]]; then
	echo -e "> Sending '$message_type' message: ${MSGCOLOR}$message_header${NOCOLOR}"
else
	echo -e "> Sending '$message_type' message with payload (${#payload} bytes): ${MSGCOLOR}$message_header${NOCOLOR}"
fi

#Show output and exit for debug
#echo "$request" | jq . && exit

# !!! senseless 'if': checking exit status of an echo command a few lines up
#if (( $? )); then
#	echo "Error formatting JSON message"
#	exit 1
#fi

[[ -n "$LOG" ]] && echo "[`date`] > `echo "$request" | jq . -c`" >> "$LOG"

response=$( echo "$request" | curl --insecure --location --data @- \
	--connect-timeout 15 --max-time 25 --silent \
	-XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=message" --header "Content-Type: application/json"
)

exitcode=$?
if (( exitcode )); then
	echo "Error sending message (curl code=$exitcode)"
	#echo "[`date`] < Error sending message (curl code=$exitcode)" >> "$LOG"
	exit $exitcode
fi

[[ -n "$LOG" ]] && echo "[`date`] < `echo "$response" | jq . -c`" >> "$LOG"

error=$( echo "$response" | jq '.error' --raw-output )
if [[ -n "$error" && "$error" != "null" ]]; then
	echo "Error response: $error"
	exit 1
fi

exit 0
