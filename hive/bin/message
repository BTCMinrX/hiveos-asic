#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.3.7
#


readonly script_mission='Client for ASICs: The Messenger'
readonly script_version='0.5.1'
readonly script_basename="$( basename "$0" )"
#
readonly script_DEBUG="${script_DEBUG:-0}" # use value from env if exists
source /hive/bin/hive-functions.sh || { echo 'ERROR: /hive/bin/hive-functions.sh not found'; exit 1; }


# !!! bash strict mode, no unbound variables

set -o nounset


# functions

function errcho			{ echo -e "${RED-}${script_basename}>${NOCOLOR-} ${*}${NOCOLOR-}"; } 1>&2
function echo_info		{ echo -e "${LGRAY-}${script_basename}>${NOCOLOR-} ${*}${NOCOLOR-}"; }

function print_script_usage {
	echo -e '  Usage:'
	echo
	echo -e "    ${CYAN}$script_basename success|danger|warning|info \"text\" [OPTIONS]${NOCOLOR}    send a text message to the dashboard"
	echo -e "    ${CYAN}$script_basename ok|error|err|warn|default   \"text\" [OPTIONS]${NOCOLOR}    (alternative aliases)"
	echo
	echo -e "    ${CYAN}$script_basename file /path/filename [OPTIONS]${NOCOLOR}                      send a file to the dashboard"
	echo -e "    ${CYAN}$script_basename file.io|transfer.sh /path/filename [OPTIONS]${NOCOLOR}       send a file to the file sharing service"
	echo
	echo -e "    ${CYAN}$script_basename tag \"text\" [OPTIONS]${NOCOLOR}                           tag a worker with any text"
	echo
	echo -e '  Options:'
	echo
	echo -e "    ${CYAN}-e${NOCOLOR}, ${CYAN}--escape-templates${NOCOLOR}    do not expand Hive templates (like %IP%) in a message header"
	echo -e "    ${CYAN}--header=your_header${NOCOLOR}      use a custom message header: 'message file /var/log/log --header=kernel.log'"
	echo -e "    ${CYAN}-i=msg_id${NOCOLOR}, ${CYAN}--id=msg_id${NOCOLOR}    add msg_id to a message (mostly used in 'agent' script)"
	echo -e "    ${CYAN}--payload${NOCOLOR}                 add payload to a message (payload is read from stdin)"
	echo -e "    ${CYAN}-s${NOCOLOR}, ${CYAN}--silent${NOCOLOR}              silent mode, report only errors"
	echo -e "    ${CYAN}-v${NOCOLOR}, ${CYAN}--verbose${NOCOLOR}             verbose mode, show request & response"
	echo
	echo -e '  Supported templates in the text:'
	echo
	echo -e "    %BUILD%, %FW%, %HOSTNAME%, %IP%, %IP_SAFE%, %MAC%, %MAC_SAFE%, %PROFILE%, %URL%, %WORKER_NAME_RAW%"
	echo
}


# consts

declare -r RIG_CONF_default='/hive-config/rig.conf'
declare -r RIG_CONF="${RIG_CONF:-$RIG_CONF_default}" # for ASIC emulator: set to default only if RIG_CONF variable is empty


# vars

declare HIVE_API_endpoint this_argument
declare message_type message_header message_color
declare id='' id_json payload='' payload_json
declare request response
declare file_to_send='' file_size
declare -i curl_exitcode script_exitcode=0
declare -i is_silent_FLAG=0 is_verbose_FLAG=0 is_templates_escaped_FLAG=0
declare console_message=''


# sources

source colors


# main

if [[ -s "$RIG_CONF" ]]; then
	source "$RIG_CONF"
else
	errcho "Config file $RIG_CONF empty or not found"
	exit 1
fi

# process first two arguments
message_type="${1-}"
message_header="${2-}"

if [[ "$message_type" == '--help' || -z "$message_type" || -z "$message_header" ]]; then
	print_script_version
	print_script_usage
	exit 1
fi

case "$message_type" in
	'error'|'err')
		message_type='danger'
		message_color="$RED"
	;;

	'warning'|'warn')
		message_type='warning'
		message_color="$YELLOW"
	;;

	'ok'|'success')
		message_type='success'
		message_color="$GREEN"
	;;

	'tag')
		message_color="$PURPLE"
	;;

	'file')
		file_send_method="$message_type"
		file_to_send="$message_header"
		message_header="$( basename "$file_to_send" )"
	;;

	'file.io'|'transfer.sh')
		file_send_method="$message_type"
		file_to_send="$message_header"
		message_header="$( basename "$file_to_send" )"
		message_type='default'
	;;

	*)
		message_color="$CYAN"
	;;
esac

# process arguments starting from 3rd
for this_argument in "${@:3}"; do
	case "$this_argument" in
		'-e'|'--escape-templates')
			is_templates_escaped_FLAG=1
		;;

		'-i='*|'--id='*)
			id="${this_argument#*=}"
		;;

		'payload'|'--payload')
		#^^^^^^^ option without '--' is deprecated
			payload="$( < /dev/stdin )"
		;;

		'--header='*)
			message_header="${this_argument#*=}"
		;;

		'-s'|'--silent')
			is_silent_FLAG=1
		;;

		'-v'|'--verbose')
			is_verbose_FLAG=1
		;;

		*)
			errcho "unknown option '$this_argument'"
		;;
	esac
done

# process templates
[[ -n "$message_header" ]] && (( ! is_templates_escaped_FLAG )) && expand_hive_templates_in_variable_by_ref 'message_header'

# send file
if [[ -n "$file_to_send" ]]; then
	# if file isn't empty or it's a named pipe -- for <() redirections like 'message file <( ./script )'
	if [[ -s "$file_to_send" || -p "$file_to_send" ]]; then
		file_size="$( stat -Lc %s "$file_to_send" 2> /dev/null )"
		console_message="Sending $file_to_send (${file_size} bytes) to $file_send_method..."
		case "$file_send_method" in

			'file')
				payload="$( gzip -c9 < "$file_to_send" | openssl base64 -e -A 2> /dev/null )"
			;;

			'file.io')
				filesharing_server_response="$( curl --form "file=@$file_to_send" --insecure --silent https://file.io )"
				curl_exitcode=$?
				if (( curl_exitcode )); then
					errcho "$console_message ${BRED}NETWORK ERROR${NOCOLOR}"
					errcho "$( human-curl-error "$curl_exitcode" )"
					script_exitcode="$curl_exitcode"
				else
					file_io_success="$( jq --raw-output '.success' <<< "$filesharing_server_response" )"
					if [[ "$file_io_success" == 'true' ]]; then
						(( ! is_silent_FLAG )) && echo_info "$console_message ${BGREEN}SENT"
						file_io_link="$( jq --raw-output '.link' <<< "$filesharing_server_response" )"
						file_io_expiry="$( jq --raw-output '.expiry' <<< "$filesharing_server_response" )"
						echo_info "Download link ${WHITE}$file_io_link${NOCOLOR} will expire in $file_io_expiry"
					else
						errcho "$console_message ${BRED}SERVER ERROR${NOCOLOR}"
						errcho "$file_send_method response: $filesharing_server_response${NOCOLOR}"
						script_exitcode=1
					fi
				fi
				exit $(( script_exitcode ))
			;;

			'transfer.sh')
				filesharing_server_response="$( curl --insecure --silent --upload-file "$file_to_send" "https://transfer.sh/$message_header" )"
				curl_exitcode=$?
				if (( curl_exitcode )); then
					errcho "$console_message ${BRED}NETWORK ERROR${NOCOLOR}"
					errcho "$( human-curl-error "$curl_exitcode" )"
					script_exitcode="$curl_exitcode"
				else
					if [[ "$filesharing_server_response" =~ ^https://transfer.sh/ ]]; then
						(( ! is_silent_FLAG )) && echo_info "$console_message ${BGREEN}SENT"
						echo_info "Download link ${WHITE}$filesharing_server_response"
					else
						errcho "$console_message ${BRED}SERVER ERROR${NOCOLOR}"
						errcho "$file_send_method response: $filesharing_server_response${NOCOLOR}"
						script_exitcode=1
					fi
				fi
				exit $(( script_exitcode ))
			;;

		esac
	else
		errcho "$file_to_send not found or empty"
		exit 1
	fi
fi

# shellcheck disable=SC2016
request="$(
	jq \
		--null-input --compact-output \
		--arg rig_id "$RIG_ID" \
		--arg passwd "$RIG_PASSWD" \
		--arg type "$message_type" \
		--arg data "$message_header" \
		'{
			"method": "message", "jsonrpc": "2.0", "id": 0,
			"params": {$rig_id, $passwd, $type, $data}
		}'
)"

# add msg_id if any
if [[ -n "$id" ]]; then
	# shellcheck disable=SC2016
	id_json="$( jq --arg id "$id" --null-input '{"params": {$id}}' )"
	request="$( jq --slurp --compact-output '.[0] * .[1]' <<< "$request $id_json" )"
fi

# add payload if any
if [[ -n "$payload" ]]; then
	# shellcheck disable=SC2016
	payload_json="$( jq --raw-input --slurp '{"params": {"payload": .}}' <<< "$payload" )"
	request="$( jq --slurp --compact-output '.[0] * .[1]' <<< "$request $payload_json" )"
fi

if [[ -z "$payload" ]]; then
	console_message="Sending ${message_color}${message_type^^}${NOCOLOR} message '$message_header'..."
elif [[ -n "$file_to_send" ]]; then
	console_message="Sending file $file_to_send (${file_size} bytes compressed to ${#payload}) to dashboard..."
else
	console_message="Sending ${message_color}${message_type^^}${NOCOLOR} message '$message_header' with payload (${#payload} bytes)..."
fi

if (( is_verbose_FLAG )); then
	echo -n 'Request: '
	jq --color-output '.' <<< "$request"
fi

# send a message
HIVE_API_endpoint="${HIVE_HOST_URL%/}/worker/api" # cut the trailing slash in HIVE_HOST_URL, if any (like as in rocketchain's local API server URL)

# let's try to connect
declare -r -i curl_initial_connect_timeout=0
declare -r -i max_connection_attempts=15
declare -i attempts_counter curl_connect_timeout curl_max_time
declare attempts_message=''

for (( attempts_counter = 1; attempts_counter <= max_connection_attempts; attempts_counter++ )); do
	(( curl_connect_timeout = curl_initial_connect_timeout + attempts_counter ))
	(( curl_max_time = curl_connect_timeout * 3 ))
	response="$(
		curl \
			--insecure --location --data @- --silent \
			--connect-timeout "$curl_connect_timeout" --max-time "$curl_max_time" \
			--request POST "${HIVE_API_endpoint}?id_rig=${RIG_ID}&method=message" \
			--header 'Content-Type: application/json' \
		<<< "$request"
	)"
	curl_exitcode=$?
	(( attempts_counter > 1 || curl_exitcode )) && attempts_message="[$attempts_counter/$max_connection_attempts] "
	if (( curl_exitcode )); then
		is_silent_FLAG=0
		errcho "${attempts_message}$console_message ${BRED}FAIL ($curl_exitcode)${NOCOLOR}"
		#errcho "$( human-curl-error "$curl_exitcode" )"
		sleep "$attempts_counter"
	else
		break
	fi
done

if (( is_verbose_FLAG )); then
	echo -n 'Response: '
	jq --color-output '.' <<< "$response"
fi

# check curl result
if (( curl_exitcode )); then
	errcho "${attempts_message}$console_message ${BRED}FAIL ($curl_exitcode)${NOCOLOR}"
	#errcho "$( human-curl-error "$curl_exitcode" )"
	if (( ! is_verbose_FLAG )) && [[ -n "$response" ]]; then
		errcho "Response: $response"
	fi
	script_exitcode="$curl_exitcode"
else
	# parse the server answer
	error="$( jq '.error' --raw-output <<< "$response" )" # does the .error key is deprecated?
	errors="$( jq 'if .errors.type != null then .errors.type[] else null end' --raw-output <<< "$response" )"
	if is_JSON_string_not_empty_or_null "$error" || is_JSON_string_not_empty_or_null "$errors"; then
		errcho "${attempts_message}$console_message ${BRED}API SERVER ERROR${NOCOLOR}"
		is_JSON_string_not_empty_or_null "$error"	&& errcho "API server response: $error"
		is_JSON_string_not_empty_or_null "$errors"	&& errcho "API server response: $errors"
		if (( script_DEBUG )); then
			errcho "[DEBUG] Full JSON response:"
			jq '.' --color-output <<< "$response" 1>&2
		fi
		script_exitcode=1
	else
		(( ! is_silent_FLAG )) && echo_info "${attempts_message}$console_message ${BGREEN}SENT"
	fi
fi

exit $(( script_exitcode ))
