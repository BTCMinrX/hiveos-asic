#!/hive/sbin/bash


readonly script_mission='Client for ASICs: Routine controller'
readonly script_version='1.3.5'
readonly script_basename="$( basename "$0" )"


# !!! bash strict mode, no unbound variables

set -o nounset


# functions

function print_script_version {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function print_script_usage {
	echo -e "Usage: ${CYAN-}${script_basename} [log]${NOCOLOR-}"
	echo
	echo -e "       ${WHITE-}log${NOCOLOR-} - show last $log_lines_to_tail lines from log and exit"
	echo
}

function calculate_percent_from_number {
	#
	# calculate_percent_from_number 'percent' 'number'
	#
	# gives result rounded to nearest integer
	#

	# args

	(( $# != 2 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	local -r -i percent=${1-}
	local -r -i number=${2-}

	# code

	printf '%.0f\n' "$((10**9 * (number * percent) / 100 ))e-9" # yay, neat trick
}

function get_file_size_in_bytes {
	#
	# get_file_size_in_bytes 'file_name'
	#
	# highly portable, uses ls
	#

	# args

	(( $# != 1 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	local -r file_name="${1-}"

	# arrays

	local -a ls_output_field=()

	# code

	# parse ls output to array
	# -rwxr-xr-x 1 0 0 4745 Apr  3 16:03 log-watcher.sh
	# 0          1 2 3 4    5    6 7     8
	if [[ -f "$file_name" ]] && ls_output_field=( $( ls -dn "$file_name" ) ); then
		# print 5th field
		echo "${ls_output_field[4]}"
	else
		return $(( exitcode_ERROR_NOT_FOUND ))
	fi
}

function pgrep_count {
	#
	# pgrep_count 'pattern'
	#
	# pgrep --count emulator
	#
	
	# args

	(( $# != 1 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	local -r pattern="$1"

	# code

	ps w | grep -E "$pattern" | grep -cv 'grep'
}

function pgrep_quiet {
	#
	# pgrep_quiet 'pattern'
	#
	# pgrep --quiet emulator
	#
	
	# args

	(( $# != 1 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	local -r pattern="$1"

	# code

	ps w | grep -E "$pattern" | grep -qv 'grep'
}

function initialize_dictionaries {
	# consts

	# for assembling regexes for various date formats
	# named as strftime() conversion specifier characters
	local -r Y='[12][0-9]{3}' m='[01][0-9]' d='[0123][0-9]' e='[ 123][0-9]' # %e: space padded month's day
	local -r a='(Mon|Tue|Wed|Thu|Fri|Sat|Sun)' b='(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'
	local -r H='[012][0-9]' M='[0-5][0-9]' S='[0-5][0-9]'
	local -r F="$Y-$m-$d" T="$H:$M:$S"
	local -r z='[+-][01][0-9]{3}' # %z: +hhmm numeric time zone (e.g., -0400)
	local -r Z="[A-Z][A-Za-z]*" # %Z: alphabetic time zone abbreviation (e.g., EDT)

	# unsupported formats:
	#
	# ISO_8601	2020-04-03T05:38:26
	# RFC 3339	2020-04-03T05:38:26.123456-0000
	# RFC 2822	Fri, 03 Apr 2020 05:38:26 GMT
	#			Fri, 03 Apr 2020 05:38:26.123456 -0000

	declare -r -A -g date_formats_dictionary=(
		['list_by_incidence']='ISO_8601_old perl syslog BusyBox'

		['ISO_8601_old'.RE]="^$F $T"		# 2020-01-18 05:08:13				(19 chars)
		['ISO_8601_old'.pattern]='F T'

		['perl'.RE]="^$a $b $e $T $Y"		# Sun Jan  6 21:29:57 2020			(24 chars)
		['perl'.pattern]='a b e T Y'

		['syslog'.RE]="^$b $e $T"			# Apr  3 20:44:01					(15 chars)
		['syslog'.pattern]='b e T'

		['BusyBox'.RE]="^$a $b $e $T $Z $Y"	# Fri Apr  3 07:29:28 Europe 2020	(31 char)
		['BusyBox'.pattern]='a b e T Z Y'
	)										# in use in: split_log_line_to_date_and_message

	declare -r -A -g translate_month_name_to_number_dictionary=(
		['Jan']=1 ['Feb']=2 ['Mar']=3 ['Apr']=4  ['May']=5 ['Jun']=6
		['Jul']=7 ['Aug']=8 ['Sep']=9 ['Oct']=10 ['Nov']=11 ['Dec']=12
		['unknown']=0
	)										# in use in: split_log_line_to_date_and_message

	# vars

	declare -A -g logs_counters				# in use in: get_new_lines_from_log
	declare -A -g routine_checkups_counters	# in use in: routine_checkups, print_summary_report
	declare -A -g time_counter=(
		['minutes']=0
		['hours']=0
		['days']=0
	)										# in use in: tick_tock, every_nth_minute, every_nth_hour, every_nth_day
}

# time functions

function tick_tock {
	# advance running d h m time counters
	if (( time_counter[minutes]++ >= 59 )); then
		time_counter[minutes]=0
		if (( time_counter[hours]++ >= 23 )); then
			time_counter[hours]=0
			(( time_counter[days]++ ))
		fi
	fi
}

function every_nth_minute {
	# every_nth_minute 'minute' 'command' ['options'...]
	(( $# < 2 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	(( time_counter[minutes] % $1 == 0 )) && "${@:2}"
}

function every_nth_hour {
	# every_nth_hour 'hour' 'command' ['options'...]
	(( $# < 2 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	(( time_counter[hours] % $1 == 0 && time_counter[minutes] == 0 )) && "${@:2}"
}

function every_nth_day {
	# every_nth_day 'day' 'command' ['options'...]
	(( $# < 2 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	(( time_counter[days] % $1 == 0 && time_counter[hours] == 0 && time_counter[minutes] == 0 )) && "${@:2}"
}

function split_log_line_to_date_and_message {
	#
	# split_log_line_to_date_and_message 'log_line' 'date_var_by_ref' 'message_var_by_ref'
	#

	# args

	(( $# != 3 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	local -r log_line="${1-}"
	local -r -n log_date="${2-}" # get var by ref
	local -r -n log_message="${3-}" # get var by ref

	# vars

	local a b d e m F T Z Y

	# code

	log_date='--empty-timestamp--'
	log_message="${log_line}"

	for this_format in ${date_formats_dictionary['list_by_incidence']}; do
		if [[ "$log_line" =~ ${date_formats_dictionary[${this_format}.RE]} ]]; then
			read -r -t 0.1 ${date_formats_dictionary[${this_format}.pattern]} message <<< "$log_line"
			[[ -z "${F-}" && -z "${d-}" ]] && printf -v d '%02u' "$(( 10#$e ))" # drop any leading zeros before printf %u
			[[ -z "${F-}" && -z "${m-}" ]] && printf -v m '%02u' "${translate_month_name_to_number_dictionary[${b-unknown}]}"
			[[ -z "${F-}" && -z "${Y-}" ]] && printf -v Y '%(%Y)T' -1
			[[ -z "${F-}" ]] && F="$Y-$m-$d"
			printf -v log_date '%-10.10s %-8.8s' "$F" "$T"
			log_message="${message}"
			break
		fi
	done
}

function filter_lines_send_messages {
	#
	# get lines from stdin, parse them and send message, if necessary
	#

	# consts

	local -r -i send_messages_enabled=1

	# vars

	local event_type log_line log_message log_timestamp message_body

	# code

	while read -r -t 0.1 log_line; do
		if [[ -z "${log_line-}" ]]; then
			# skip empty log_lines
			continue
		fi

		split_log_line_to_date_and_message "$log_line" 'log_timestamp' 'log_message' # !! last two vars passed by reference, not by value

		# cut milliseconds from watchdog messages like 'Total rate is 0 after 1870.000000 seconds, restart'
		log_message="${log_message//\.000000 seconds/ seconds}"

		case "$log_message" in
			'STATUS_'*			)	event_type='skip'		;;
			'ERROR_'*			)	event_type='error'		;;
			'WARN_'*			)	event_type='warning'	;;
			*'domains fixed'*	)	event_type='warning'	;;
			*					)	event_type='error'		;;
		esac

		if [[ "$event_type" != 'skip' ]]; then
				printf -v message_body '%-19.19s %-13.13s %b' "$log_timestamp" "[LOG_${event_type^^}]" "$log_message"
				echo "$message_body"
			if (( send_messages_enabled )); then
				printf -v message_body 'Date: %s\nType: %s\n%b' "$log_timestamp ${TZ-GMT}" "${event_type^^}" "$log_message"
				echo "$message_body" | message "$event_type" "$log_message" payload
			fi
		fi
	done
}

function get_new_lines_from_log {
	#
	# get_new_lines_from_log 'log_name' ['log_name'...]
	#
	# the function uses *global* hashtable for saving session data between calls
	# WARNING: it does not work in any pipes and subshells like | () $() <()
	#

	# args

	(( $# < 1 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	local -r -a logs_list=( "$@" )

	# vars

	local previous_lines_quantity current_lines_quantity log_to_check
	local -i previous_log_size=0
	local -i current_log_size=0
	local -i tail_from_line=0
	local -i how_much_new_lines=0
	local -i is_something_found=$(( exitcode_OK_NOTHING_HAPPENED ))

	# code

	for log_to_check in "${logs_list[@]}"; do
		current_lines_quantity=''

		if [[ -s "$log_to_check" ]]; then
			# don't waste resources to count lines on every iteration, check file size first
			current_log_size="$( get_file_size_in_bytes "$log_to_check" )"

			if [[ -z "${logs_counters[${log_to_check}:size]-}" ]]; then # first time, init vars
				current_lines_quantity="$( wc -l < "$log_to_check" )"
				previous_log_size="$current_log_size"
			else # not a first time
				previous_log_size="${logs_counters[${log_to_check}:size]}"
			fi

			if (( current_log_size > previous_log_size )); then # log file has changed
				is_something_found=$(( exitcode_WARNING_SOMETHING_HAPPENED ))
				current_lines_quantity="$( wc -l < "$log_to_check" )" # get current lines count
				previous_lines_quantity="${logs_counters[${log_to_check}:lines]}" # get previous lines count
				(( tail_from_line = previous_lines_quantity + 1 ))
				(( how_much_new_lines = current_lines_quantity - previous_lines_quantity ))
				tail -n "+$tail_from_line" "$log_to_check" | head -n "$how_much_new_lines"
			fi

			# save current values to previous values
			logs_counters["${log_to_check}:size"]="$current_log_size"
			if [[ -n "$current_lines_quantity" ]]; then
				logs_counters["${log_to_check}:lines"]="$current_lines_quantity"
			fi
		fi
	done

	return $(( is_something_found ))
}

function print_last_lines_from_log {
	if [[ -s "$controller_log_file" ]]; then
		tail -n "$log_lines_to_tail" "$controller_log_file"
	fi
}

function parse_arguments {
	case "${1-}" in
		'log')
			print_script_version
			print_last_lines_from_log
			exit 0
			;;
		'')
			: 'do nothing special'
			;;
		*)
			print_script_version
			print_script_usage
			exit 0
			;;
	esac
}

function print_log_entry {
	#
	# print_log_entry 'event_type' 'log_message'
	#

	# args

	(( $# != 2 )) && return $(( exitcode_ERROR_IN_ARGUMENTS ))
	local event_type="${1-<undefined>}"
	local log_message="${2-<undefined>}"

	# code

	printf '%(%F %T)T %-13.13s %b\n' -1 "[${event_type^^}]" "$log_message"
}

function drop_caches {
	sync && echo 3 > /proc/sys/vm/drop_caches
}

function wipe_memory {
	drop_caches
	du -h /tmp/* /var/log/ | grep -F 'M' | awk '{print $2}' | tee >( xargs rm )
}

function truncate_logs {

	# vars

	local this_file
	local -i current_number_of_lines_in_log

	# code

	for this_file in /var/log/* /tmp/*.log /hive-config/*.log /config/*.log; do
		if [[ -s $this_file ]]; then
			current_number_of_lines_in_log="$( wc -l < "$this_file" )"
			if $(( current_number_of_lines_in_log > log_lines_truncate_limit )); then
				print_log_entry 'info' "Truncate log $this_file, $current_number_of_lines_in_log to $log_lines_truncate_limit"
				echo "$( tail -n "$log_lines_truncate_limit" "$this_file" )" > "$this_file"
			fi
		fi
	done
}

#
# check_for_* functions executed once in a minute
#

function check_for_1970_year {

	# vars

	local -i current_year date_from_server_in_seconds
	local -i is_something_happened=$(( exitcode_OK_NOTHING_HAPPENED ))

	# code

	printf -v current_year '%(%Y)T' -1

	if (( current_year == 1970 )); then
		is_something_happened=$(( exitcode_WARNING_SOMETHING_HAPPENED ))
		if [[ -z ${HIVE_HOST_URL-} ]]; then
			HIVE_HOST_URL='http://api.hiveos.farm'
		fi
		date_from_server_in_seconds="$( curl -I "$HIVE_HOST_URL" 2>&1 | grep -F 'Date:' | cut -d' ' -f3-6 | timetran )"
		print_log_entry 'warning' "System date is 1970. Get actual date from server: $( date -s "@$date_from_server_in_seconds" )"
	fi

	return $(( is_something_happened ))
}

function check_for_free_memory {

	# consts

	local -r -i low_memory_limit=5000
	local -r -i top_lines_count=10

	# vars

	local -i is_something_happened=$(( exitcode_OK_NOTHING_HAPPENED ))
	local free_memory="$( cat /proc/meminfo | grep -Fi 'memfree' | sed 's/[^0-9]//g' )"
	local print_top

	# code

	if (( free_memory < low_memory_limit )); then
		is_something_happened=$(( exitcode_WARNING_SOMETHING_HAPPENED ))
		print_log_entry 'warning' "Memory low: $free_memory Mb"
		print_top="$( top -b -n1 | head -n "$top_lines_count" )"
		echo -e "$print_top" | tee >( message warn "Low memory detected, trying to clean the logs" payload; echo )

		wipe_memory
		truncate_logs
	fi

	return $(( is_something_happened ))
}

function check_for_updated_build_version {

	# vars

	local -i is_something_happened=$(( exitcode_OK_NOTHING_HAPPENED ))
	local message_header new_build_version previous_build_version

	# code

	if pgrep_quiet 'selfupgrade|S69hive'; then
		# waiting for Hive installation to be finished bc we don't have /hive atm and this could fire a false positive
		print_log_entry 'info' "selfupgrade running, skipping ${FUNCNAME}..."
		return $(( exitcode_OK_NOTHING_HAPPENED ))
	fi
	
	if ! cmp -s /hive/etc/build /hive-config/build; then
		is_something_happened=$(( exitcode_WARNING_SOMETHING_HAPPENED ))
		new_build_version="$( cat /hive/etc/VERSION )-$( cat /hive/etc/build 2> /dev/null || echo 'release' )"
		previous_build_version="$( cat /hive/etc/VERSION )-$( cat /hive-config/build 2> /dev/null || echo 'release' )"
		cp -rf /hive/etc/build /hive-config/build

		message_header="Client updated from $previous_build_version to $new_build_version"
		print_log_entry 'info' "$message_header"
		message ok "$message_header"
		echo
	fi

	return $(( is_something_happened ))
}

function check_for_virii {

	# consts

	local -r message_header='Virus found!'

	# vars

	local -i is_something_happened=$(( exitcode_OK_NOTHING_HAPPENED ))
	local -i is_virus_found=0
	local virus_report

	# code

	if pgrep_quiet 'selfupgrade|S69hive'; then
		# waiting for Hive installation to be finished bc we don't have /hive atm and this could fire a false positive
		print_log_entry 'info' "selfupgrade running, skipping ${FUNCNAME}..."
		return $(( exitcode_OK_NOTHING_HAPPENED ))
	fi

	if ! which virus-check > /dev/null; then
		print_log_entry 'warning' "'virus-check' program not found"
		return $(( exitcode_ERROR_NOT_FOUND ))
	fi

	virus_report="$( virus-check )"
	is_virus_found=$?

	if (( is_virus_found )); then
		is_something_happened=$(( exitcode_WARNING_SOMETHING_HAPPENED ))
		print_log_entry 'error' "$message_header"
		if (( ! message_about_virus_was_sent )); then
			echo -e "$virus_report" | tee >( message err "$message_header" payload; echo )
			if (( assign_tag_to_worker )); then
				message tag 'virus found'
				echo
			fi
			message_about_virus_was_sent=1
		fi
	fi

	return $(( is_something_happened ))
}

function check_for_flash_in_ro_mode {

	# consts

	local -r -a directories_on_flash=( '/nvdata' '/config' )

	# vars

	local directory message_header temp_file
	local -i is_something_happened=$(( exitcode_OK_NOTHING_HAPPENED ))

	# code

	for directory in "${directories_on_flash[@]}"; do
		if [[ -d "$directory" ]]; then
			if temp_file="$( mktemp -p "$directory" 2> /dev/null )"; then
				rm -rf "$temp_file"
			else
				is_something_happened=$(( exitcode_WARNING_SOMETHING_HAPPENED ))
				message_header="$directory switched to read-only mode, please check"
				print_log_entry 'error' "$message_header"
				if (( ! message_about_ro_was_sent )); then
					message err "$message_header"
					message_about_ro_was_sent=1
				fi
			fi
		fi
	done

	return $(( is_something_happened ))
}

function check_for_errors_in_logs {

	# consts

	local -r -a logs_to_check=( '/nvdata/miner_status.log' '/config/watchdog.log' )

	# vars

	local -i is_something_happened=$(( exitcode_OK_NOTHING_HAPPENED ))

	# code

	get_new_lines_from_log "${logs_to_check[@]}" > >( filter_lines_send_messages )

	# ??? could that be the exitcode will come from last command in chain? I think not, there's a simple redirection
	if (( $? != 0 )); then
		is_something_happened=$(( exitcode_WARNING_SOMETHING_HAPPENED ))
	fi

	return $(( is_something_happened ))
}

function routine_checkups {

	# vars

	local check_function

	# code

  	# execute check_for_* functions in alphabetical order
	for check_function in $( compgen -A function 'check_for_' | sort ); do
		"$check_function"
		if (( $? == 0 )); then
			: "${routine_checkups_counters[${check_function}:idle]:=0}" # take care of unbound var, haven't figured out a pretty way
			(( routine_checkups_counters[${check_function}:idle]++ ))
		else
			: "${routine_checkups_counters[${check_function}:alarm]:=0}" # take care of unbound var, haven't figured out a pretty way
			(( routine_checkups_counters[${check_function}:alarm]++ ))
		fi
	done
}

function print_summary_report {

	# vars
	
	local -A functions_list
	local function_name this_function
	local -i alarm_counter idle_counter total_counter
	local -i number_of_alarmed_checkup_functions=0 total_number_of_checkup_functions=0

	# code

	# get unique list of function names
	for this_function in "${!routine_checkups_counters[@]}"; do
		function_name="${this_function%%:*}" # cut .* from string
		functions_list["$function_name"]=1 # any char you want, even ''
	done

	for this_function in "${!functions_list[@]}"; do
		alarm_counter="${routine_checkups_counters[${this_function}:alarm]-0}"
		if (( alarm_counter != 0 )); then
			(( number_of_alarmed_checkup_functions++ ))
		fi
	done

	total_number_of_checkup_functions="${#functions_list[@]}"

	if (( number_of_alarmed_checkup_functions > 0 )); then
		print_log_entry 'info' "Daily controller report. Checkup functions involved: $number_of_alarmed_checkup_functions/$total_number_of_checkup_functions"

		printf '%33.33s %-35.35s %7.7s %7.7s\n' '' 'Checkup function' 'Alarms' 'Total'
		for this_function in $( printf '%s\n' "${!functions_list[@]}" | sort ); do
			alarm_counter="${routine_checkups_counters[${this_function}:alarm]-0}"
			if (( alarm_counter != 0 )); then
				idle_counter="${routine_checkups_counters[${this_function}:idle]-0}"
				(( total_counter = alarm_counter + idle_counter ))
				printf '%33.33s %-35.35s %7.7s %7.7s\n'	'' "$this_function" "$alarm_counter" "$total_counter"
			fi
			routine_checkups_counters["${this_function}:idle"]=0
			routine_checkups_counters["${this_function}:alarm"]=0
		done
	else
		print_log_entry 'info' 'Daily controller report: everything was OK over the past 24h'
	fi
}


# global consts

declare -r -i sleep_time=60
declare -r -i assign_tag_to_worker=1
declare -r -i log_lines_to_tail=80
declare -r -i log_lines_truncate_limit=1000
declare -r controller_log_file='/config/hive-controller.log'
declare -r -i exitcode_OK_NOTHING_HAPPENED=0
declare -r -i exitcode_WARNING_SOMETHING_HAPPENED=1
declare -r -i exitcode_ERROR_IN_ARGUMENTS=128
declare -r -i exitcode_ERROR_NOT_FOUND=100


# global vars

declare check_function=''
declare -i actual_sleep_time
declare -i execution_time
declare -i message_about_virus_was_sent=0
declare -i message_about_ro_was_sent=0


# global sources

[[ -s /hive/bin/asic-model ]] && source asic-model
[[ -s /hive-config/rig.conf ]] && source /hive-config/rig.conf
[[ -s /hive/bin/colors ]] && source colors


# global exports

export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib


# main()

#TODO:
#logs problem
#watchdog alert
#pool checks
#DNS checks
#wd
# warn unsigned fw owners

parse_arguments "$@"
initialize_dictionaries

print_log_entry 'info' "Controller $script_version started"

# main loop
while true; do
	printf -v before_execution '%(%s)T' -1

	# routine
	routine_checkups

	# cron-like stuff
	every_nth_minute 10 /hive/bin/agent-screen dontattach
	every_nth_hour 1 /hive/bin/cache-hive-ip > /dev/null
	every_nth_day 1 print_summary_report

	printf -v after_execution '%(%s)T' -1

	(( execution_time = after_execution - before_execution ))
  	(( actual_sleep_time = sleep_time - execution_time ))
	if (( execution_time > $( calculate_percent_from_number 80 "$sleep_time" ) )); then
		: "${routine_checkups_counters[controller_lagging:idle]:=0}" # take care of unbound var, haven't figured out a pretty way
		(( routine_checkups_counters[controller_lagging]++ ))
		print_log_entry 'warning' "Lagging. Routine checkups took $execution_time seconds ( >80% of an idle time )"
	fi

	sleep $(( actual_sleep_time <= 0 ? 0 : actual_sleep_time ))
	tick_tock # advance dhm timer
done
