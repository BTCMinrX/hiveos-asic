#!/bin/sh


# functions

get_random_number_between () {
	awk -v min="$1" -v max="$2" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
}

echo_action () {
	echo "${script_basename}> ${*}..."
}

echo_info () {
	echo "${script_basename}: ${*}"
}

boot_hive () {
	# $FARM_HASH can be defined externally
	if [ -s /config/FARM_HASH ]; then
		FARM_HASH=$( cat /config/FARM_HASH )
		echo_info "External FARM_HASH found in /config/FARM_HASH: $FARM_HASH"
		/hive/sbin/bash -c "/hive/bin/firstrun $FARM_HASH"
		rm /config/FARM_HASH
	fi

	/hive/bin/hive > /tmp/hive-boot.log
}

deploy_hive () {
	cd /nvdata

	#
	# commented out bc it's redundant
	#
	#if [ -z "$URL" ]; then
	#	URL='http://download.hiveos.farm'
	#fi

	if [ -s /config/HIVE_HOST_URL ]; then
		URL=$( cat /config/HIVE_HOST_URL | tr -d ';|"' | sed s%'api.'%download.% )
		echo_info "External URL found in /config/HIVE_HOST_URL: $URL"
	fi

	case "$URL" in
		*'download'*)
			true
			;;
		'')
			echo_info 'Empty URL, using http://download.hiveos.farm'
			URL='http://download.hiveos.farm'
			;;
		*)
			echo_info "Invalid URL: $URL, using http://download.hiveos.farm"
			URL='http://download.hiveos.farm'
			;;
	esac

	if [ "$force_download" = 1 ] || [ ! -e /nvdata/latest.tar.gz ] || ! gunzip -tvf /nvdata/latest.tar.gz >/dev/null 2>&1; then
		snooze_time="$( get_random_number_between 5 30 )"
		echo_info "${snooze_time}s random pause (make it easier for a bulk update)"
		sleep "$snooze_time"
		retries_counter=0
		until echo_action "Downloading from ${URL}..." && curl --insecure --location --fail --silent --show-error "$URL/asic/repo/s9/latest" --output latest_new.tar.gz && echo_action 'Checking integrity' && gunzip -tvf /nvdata/latest_new.tar.gz >/dev/null 2>&1; do
			retries_counter=$(( retries_counter + 1 ))
			snooze_time="$( get_random_number_between 15 60 )"
			echo_info "Error. Try #${retries_counter} in $snooze_time seconds..."
			sleep "$snooze_time"
		done
		cp -rf latest_new.tar.gz latest.tar.gz
		sync
		[ -e /nvdata/latest_new.tar.gz ] && rm /nvdata/latest_new.tar.gz
	fi

	if [ ! -d /config/hive ]; then
		mkdir -p /config/hive/hive-config
	fi

	echo_action 'Extracting latest.tar.gz'
	tar -xzv -f latest.tar.gz || { echo_info 'Error extracting latest.tar.gz, exiting'; exit 1; }

	[ -L /hive ] && rm /hive
	rm -rf hiveos-asic-*/hive/sbin/teleconsole

	echo_action 'Copying extracted files to /hive'
	cp -rf hiveos-asic-*/hive / || { echo_info 'Error copying files to /hive, exiting'; exit 1; }

	echo_action 'Copying finished, removing temporary files'
	#rm latest.tar.gz
	rm -rf hiveos-asic* && echo_info 'Temporary files removed' || echo_info 'Temporary files removing error'
	sleep 2

	[ -d /hive-config ] && [ ! -L /hive-config ] && mv -f /hive-config /config/hive/
	[ ! -L /hive-config ] && [ ! -e /hive-config ] && ln -s /config/hive/hive-config/ /hive-config
	#cp -rf /hive/share/S9/S69hive /etc/rcS.d/
	cp -rf /hive/share/S9/.profile /home/root/
	cp -rf /hive/share/S9/.screenrc /home/root/

	echo_action 'Booting Hive'
	boot_hive &
}


# consts

readonly script_basename="$( basename "$0" )"


# exports

export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib


# code

trap -- 'echo_info "SIGHUP received, ignoring..."' SIGHUP

if [ -s /etc/hive-url ]; then
	URL=$( cat /etc/hive-url )
fi

if [ -s /config/hive-url ]; then
	URL=$( cat /config/hive-url )
fi

if [ "$1" = '-f' ]; then
	echo_info 'Force download mode ON'
	force_download=1
else
	force_download=0
fi

if [ -e /hive ]; then
	echo_action 'Booting Hive'
	boot_hive &
else
	echo_action 'Deploying Hive'
	deploy_hive &
fi
